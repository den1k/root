{"version":3,"sources":["root/impl/resolver.cljc"],"mappings":"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","names":["root.impl.resolver/->resolver-spec","content-spec","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","nested-contents","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__102512","cljs.core/coll?","contents-map","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__102513","cljs.core/map?","i__13771__auto__","v__13772__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword?","cljs.spec.alpha/or-spec-impl","var_args","G__102516","root.impl.resolver/resolve-content","js/Error","p__102517","map__102518","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","root","content-k","content","root.impl.resolver.resolve_content.cljs$core$IFn$_invoke$arity$4","cljs.core/identity","resolve-spec","contents-hiccup-wrapper","f","vec__102520","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","type","root.impl.util/conform!","G__102523","cljs.core/Keyword","cljs.core/with-meta","G__102524","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","k","ref","G__102525","cljs.core/reduce-kv","out","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p__102526","map__102527","x","next-key","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__102531","root.impl.resolver/resolve-child-content","p__102532","map__102533","ent","root.impl.resolver.resolve_child_content.cljs$core$IFn$_invoke$arity$3","content-keys","content-key->ui-key","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","chk","ch","coll?","or__4185__auto__","cljs.core/not-empty","cljs.spec.alpha/def-impl","G__102535","cljs.spec.alpha/and-spec-impl","p1__102536#","cljs.core/vector?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","G__102550","p__102552","p__102553","map__102554","map__102555","root.impl.resolver/wrap-actions-and-handlers","dispatch-fn","transact","entity-actions","add-id","->ref","orig-ent","actions","handlers","parent-id","conformed","txs-or-txs-path","G__102573","cljs.core/first","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","tx","map__102576","op","path","G__102578","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","cljs.core/not","G__102582","txs","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","form-tx","actions-map","medley.core/map-vals","txs-or-path","txs-or-path-conformed","resolve-txs","form-txs","G__102585","G__102586","dispatch-val","ent-actions","G__102587","wrap","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","root.impl.resolver/deref-state-hook","uix.hooks.alpha/StateHook","cljs.core/deref","root.impl.resolver/js-promise?","p","cljs.core/boolean","p__102588","map__102589","root.impl.resolver/js-promise-hook","loading","promise","st","uix.core.alpha/state","cljs.core/reset!","G__102593","root.impl.resolver/resolved-view","p__102595","p__102596","map__102597","map__102598","root.impl.resolver.resolved_view.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","lookup-sub","root-id","data","temp__5739__auto__","G__102601","G__102603","G__102604","G__102605","G__102606","p__102607","map__102608","id-or-ent","cljs.core.into.cljs$core$IFn$_invoke$arity$2","root.impl.util/ensure-vec","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core/nil?","G__102611","root.impl.resolver/resolved-data","p__102612","p__102613","map__102614","map__102615","lookup","G__102618","G__102619","G__102620","p__102621","map__102622","root.impl.resolver.resolved_data.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns root.impl.resolver\n  (:require [root.impl.util :as u]\n            [root.impl.entity :as ent]\n            [medley.core :as md]\n            [clojure.spec.alpha :as s]\n            [uix.core.alpha :as uix])\n  #?(:clj (:import clojure.lang.Cons)))\n\n(defn ->resolver-spec [content-spec]\n  (let [content-spec    (s/spec content-spec)\n        nested-contents (s/coll-of content-spec)\n        contents-map    (s/map-of keyword?\n                                  (s/or :entity content-spec\n                                        :entities nested-contents))]\n    (s/spec\n     (s/or :content content-spec\n           :contents nested-contents\n           :content-map contents-map))))\n\n(defn resolve-content\n  ([root content-k content] (resolve-content root content-k content identity))\n  ([{:as root :keys [resolve-spec contents-hiccup-wrapper]} content-k content f]\n   (let [[type] (u/conform! resolve-spec content)]\n     (case type\n       :content\n       (with-meta (f {:content-k content-k\n                      :id-or-ent content}) {::type :entity})\n\n       :contents\n       (with-meta (into contents-hiccup-wrapper\n                        (map-indexed\n                         (fn [k ref]\n                           (f {:k         k\n                               :content-k content-k\n                               :id-or-ent ref})))\n                        content)\n                  {::type :entities})\n\n       :content-map\n       (with-meta\n        (reduce-kv\n         (fn [out k v]\n           (assoc out k\n                      (resolve-content\n                       root\n                       content-k        ;; maybe wrong\n                       v\n                       (comp\n                        f\n                        (fn [{:as x next-key :k}]\n                          (assoc x :k (if next-key\n                                        [k next-key]\n                                        k)\n                                   :content-k content-k))))))\n         {}\n         content)\n        {::type :entity-map})))))\n\n(defn resolve-child-content\n  ([root ent] (resolve-child-content root ent identity))\n  ([{:as root :keys [content-keys content-key->ui-key]} ent f]\n   (reduce\n    (fn [out chk]\n      (let [ch    (chk ent)\n            coll? (coll? ch)]\n        (if (or (and coll? (not-empty ch)) (and (not coll?) (some? ch)))\n          (assoc out (content-key->ui-key chk) (resolve-content root chk ch f))\n          out)))\n    ent\n    content-keys)))\n\n(s/def ::txs-path (s/coll-of keyword?))\n\n(s/def ::op-path\n  (s/and #(or (keyword? %) (vector? %))\n         (s/conformer\n          (fn [x]\n            (if (keyword? x)\n              [x]\n              (and (vector? x) (not-empty x)))))))\n\n(s/def ::partial-tx\n  (s/cat :op keyword?\n         :path (s/? ::op-path)\n         :ent (s/? ::ent/partial-entity)))\n\n(s/def ::partial-txs (s/coll-of ::partial-tx))\n\n(s/def ::partial-txs-or-txs-path\n  (s/or :partial-txs ::partial-txs\n        :path ::txs-path))\n\n(defn wrap-actions-and-handlers\n  [{:as root :keys [dispatch-fn transact entity-actions add-id ->ref]}\n   {:as orig-ent :keys [actions handlers parent-id]}]\n  (letfn [(resolve-txs [conformed txs-or-txs-path]\n            (case (first conformed)\n              :partial-txs txs-or-txs-path\n              :path (get-in entity-actions txs-or-txs-path)))\n          (form-tx [tx]\n            (let [{:keys [op path ent]} (u/conform! ::partial-tx tx)]\n              (cond-> [op]\n                path (conj (replace {:<- parent-id} path))\n                (not path) (conj (:path orig-ent))\n                ent (conj (cond-> ent (nil? (->ref ent)) add-id))\n                (not ent) (conj orig-ent))))\n          (form-txs [txs]\n            (mapv form-tx txs))\n          (wrap [actions-map]\n            (md/map-vals\n             (fn [txs-or-path]\n               (fn []\n                 (let [txs-or-path-conformed\n                       (u/conform! ::partial-txs-or-txs-path txs-or-path)]\n                   (->> txs-or-path\n                        (resolve-txs txs-or-path-conformed)\n                        form-txs\n                        (transact root)))))\n             actions-map))]\n    (let [dispatch-val (dispatch-fn orig-ent)\n          ent-actions  (get entity-actions dispatch-val)]\n      (cond-> orig-ent\n        ent-actions (assoc :actions (wrap ent-actions))\n        actions (update :actions merge (wrap actions))\n        handlers (assoc :handlers (wrap handlers))))))\n\n(defn- deref-state-hook [x]\n  #?(:clj  x\n     :cljs (if (instance? uix.hooks.alpha/StateHook x)\n             (deref x)\n             x)))\n\n(defn js-promise? [p]\n  (boolean (.-then p)))\n\n(defn- js-promise-hook [{:as x :keys [loading promise]}]\n  #?(:clj  x\n     :cljs (let [x (or promise x)]\n             (if (js-promise? x)\n               (let [st (uix/state loading)]\n                 (.then x (fn [x] (reset! st x)))\n                 st)\n               x))))\n\n(defn resolved-view\n  ([root]\n   (resolved-view root (select-keys root [:root-id :data])))\n  ([{:as root :keys [lookup-sub]} {:keys [root-id data parent-id path]}]\n   ;#?(:cljs (js/console.log :resolving :root-id root-id :parent-id parent-id :path path))\n   (when-let [data (some-> (or data (lookup-sub (or root-id path)))\n                           js-promise-hook\n                           deref-state-hook)]\n     (as-> data x\n           (with-meta x {:root root})\n           (cond-> x parent-id (assoc :parent-id parent-id))\n           (cond-> x (or path root-id) (assoc :path (or path [root-id])))\n           (cond->> x\n             root-id (wrap-actions-and-handlers root)) ; todo wrap-actions for nested\n           (resolve-child-content\n            root\n            x\n            (fn [{:keys [k id-or-ent content-k]}]\n              [resolved-view\n               root\n               (if-not (coll? id-or-ent)\n                 ; graph\n                 {:root-id   id-or-ent\n                  :parent-id root-id\n                  :path      (into [root-id content-k] (u/ensure-vec k))}\n                 ; nested\n                 {:data id-or-ent\n                  :path (into (u/ensure-vec path) (remove nil?) [content-k k])})]))\n           (root x)))))\n\n(defn resolved-data\n  ([root]\n   (resolved-view root (select-keys root [:root-id :data])))\n  ([{:as root :keys [lookup]} {:keys [root-id data parent-id path]}]\n   (when-let [data (or data (lookup (or root-id path)))]\n     (as-> data x\n           (with-meta x {:root root})\n           (cond-> x parent-id (assoc :parent-id parent-id))\n           (cond-> x path (assoc :path path))\n           (resolve-child-content\n            root\n            x\n            (fn [{:keys [k id-or-ent content-k]}]\n              (resolved-data\n               root\n               (if-not (coll? id-or-ent)\n                 ; graph\n                 {:root-id   id-or-ent\n                  :parent-id root-id\n                  :path      (into [root-id content-k] (u/ensure-vec k))}\n                 ; nested\n                 {:data id-or-ent\n                  :path (into (u/ensure-vec path) (remove nil?) [content-k k])}))))))))\n\n(comment\n\n (def data\n   {1 {:type       :user\n       :first-name \"Eva\"\n       :last-name  \"Luator\"\n       :content    {:address 2}}\n    2 {:type   :address\n       :street \"1 Long Infinite Loop\"}})\n\n (defn lookup [x]\n   (get data x))\n\n (def root\n   (root.impl.core/ui-root\n    {:lookup       lookup\n     :dispatch-fn  :type\n     :content-keys [:content]\n     :content-spec integer?}))\n\n ; To avoid a waterfall of requests and enable faster loads\n ; a request can run `resolved-data` on the backend and the result merged into a\n ; frontend data-store.\n ; On the backend `lookup` can be blocking or async with an async version of\n ; `resolved-data` that allows for multiple simultaneous `lookup`s/requests.\n (resolved-data root {:root-id 1})\n ;=> {:type       :user,\n ;    :first-name \"Eva\",\n ;    :last-name  \"Luator\",\n ;    :content    {:address 2},\n ;    :content-ui {:address {:type      :address,\n ;                           :street    \"1 Long Infinite Loop\",\n ;                           :parent-id 1,\n ;                           :path      [1 :content :address]}}}\n\n ; For the UI, render root as usual\n [root :resolve {:root-id 1}]\n ; or\n [resolved-view root {:root-id 1}])\n"]}