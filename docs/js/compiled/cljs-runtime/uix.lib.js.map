{"version":3,"sources":["uix/lib.cljc"],"mappings":";;AAeG;;;AAAA,AAAMA,AAEHC,AAAGC;AAFN,AAGE,AAAOA,AAAEA;AACFC,AAAQ,AAAOF,AAAGC;AADzB,AAEOE;;AAFP,AAGE,AAAMC,AAAU,AAAA,AAAMF;AAChBG,AAAW,AAAI,AAAA,AAAI,AAAUH,AAChBE,AACAF;AACbI,AAAS,AAAG,AAASJ,AAAS,AAAAK,AAAA;AAAAC,AAAO,AAAUJ;AAAjB,AAAA,AAAAG,AAAAC,AAAAD,AAAAC;;AAC9BC,AAAO,AAACC,AAAKT,AAAEK;AALrB,AAME,AAAOH,AAAIE;;AACX,AAAI,AAAIC,AAAS,AAAUL;AACzB,AAAAU,AAAuB,AAAOX,AAAGS;AAAjC,AAAA,AAAA,AAAAE,AAAA;AAEER;;AAFF,AAAAQ,AAAUC;AAAV,AACE,AAAOH;AAAOG;AAAaT;;;;;;;AAE7BA","names":["uix.lib/re-seq*","re","s","matches","ret","match-str","match-vals","post-idx","x__4273__auto__","y__4274__auto__","next-s","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","temp__5741__auto__","next-matches"],"sourcesContent":["(ns uix.lib\n  #?(:cljs (:require-macros [uix.lib :refer [doseq-loop]])))\n\n#?(:clj\n    (defmacro doseq-loop [[v vs] & body]\n      `(let [v# ~vs]\n         (when (seq v#)\n           (loop [x# (first v#)\n                  xs# (next v#)]\n             (let [~v x#]\n               ~@body)\n             (when (seq xs#)\n               (recur (first xs#) (next xs#))))))))\n\n#?(:cljs\n   (defn re-seq*\n     \"Similar to cljs.core/re-seq, but eager and faster\"\n     [re s]\n     (loop [s s\n            matches (.exec re s)\n            ret #js []]\n       (let [match-str (aget matches 0)\n             match-vals (if (== (.-length matches) 1)\n                          match-str\n                          matches)\n             post-idx (+ (.-index matches) (max 1 (.-length match-str)))\n             next-s (subs s post-idx)]\n         (.push ret match-vals)\n         (if (<= post-idx (.-length s))\n           (if-some [next-matches (.exec re next-s)]\n             (recur next-s next-matches ret)\n             ret)\n           ret)))))\n"]}