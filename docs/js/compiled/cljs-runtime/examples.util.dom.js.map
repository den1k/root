{"version":3,"sources":["examples/util/dom.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","js/HTMLCollection","array","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2","examples.util.dom/active-element?","node","cljs.core/boolean","G__102540","js/document","var_args","G__102543","examples.util.dom/get-selection","js/Error","examples.util.dom.get_selection.cljs$core$IFn$_invoke$arity$1","include-parent?","vec__102544","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sel","sel-range","start","end","cljs.core/not","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/lower-case","sel-node","siblings","sibl-pre-node","p1__102541#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","txt-count-until","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","n","examples.util.dom/set-selection","range","G__102547","G__102548","js/window","examples.util.dom/get-cursor","examples.util.dom.get_selection.cljs$core$IFn$_invoke$arity$0","G__102551","examples.util.dom/set-cursor","p__102557","map__102558","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","idx","examples.util.dom.set_cursor.cljs$core$IFn$_invoke$arity$3","unless-active?","and__4174__auto__","cljs.core/count","G__102561","examples.util.dom.set_cursor.cljs$core$IFn$_invoke$arity$2","G__102564","examples.util.dom/set-cursor-to-end","examples.util.dom.set_cursor_to_end.cljs$core$IFn$_invoke$arity$2","opts","or__4185__auto__","txt-count","examples.util.dom/code-block","str","G__102572","examples.util.dom/pretty-code-block","x","examples.util.dom.pretty_code_block.cljs$core$IFn$_invoke$arity$2","cljs.pprint/*print-right-margin*","margin-width","*print-right-margin*-orig-val__102574","*print-right-margin*-temp-val__102575","root.impl.util/pretty-str","p__102579","map__102580","examples.util.dom/example","title","source","details","root","open-details?"],"sourcesContent":["(ns examples.util.dom\n  (:require [root.impl.util :as u]\n            [clojure.pprint :as pp]))\n\n#?(:cljs\n   (extend-type js/HTMLCollection\n     ISeqable\n     (-seq [array] (array-seq array 0))))\n\n(defn active-element? [node]\n  #?(:cljs\n     (boolean\n      (some-> (.. js/document -activeElement)\n              (.isSameNode node)))))\n\n(defn get-selection\n  \"Returns index of caret in text. If include-parent is true,\n  will also count all siblings until the node containing the caret.\"\n  ([] (get-selection false))\n  ([include-parent?]\n   #?(:cljs\n      (let [sel       (.. js/document getSelection)\n            sel-range (.getRangeAt sel 0)\n            [start end] [(.-startOffset sel-range) (.-endOffset sel-range)]]\n        (if-not include-parent?\n          {:start start\n           :end   end\n           :type  (keyword (clojure.string/lower-case (.-type sel)))}\n          (let [sel-node        (.. sel -anchorNode -parentElement)\n                siblings        (.. sel-node -parentNode -children)\n                sibl-pre-node   (take-while #(not= sel-node %) siblings)\n                txt-count-until (reduce (fn [n node] (+ n (.. node -textContent -length))) 0 sibl-pre-node)]\n            {:start (+ txt-count-until start)\n             :end   (+ txt-count-until end)\n             :type  (keyword (clojure.string/lower-case (.-type sel)))}))))))\n\n(defn set-selection [node start end]\n  #?(:cljs\n     (let [range (doto\n                (.createRange js/document)\n                 (.setStart (.-firstChild node) start)\n                 (.setEnd (.-firstChild node) end))]\n     (doto (.getSelection js/window)\n       .removeAllRanges\n       (.addRange range)))))\n\n(defn get-cursor []\n  (:end (get-selection)))\n\n(defn set-cursor\n  ([node idx] (set-cursor node idx {}))\n  ([node idx {:keys [unless-active?]}]\n   (if (and unless-active? (active-element? node))\n     nil\n     (if (zero? (count (.-textContent node)))\n       (doto node\n         (aset \"innerHTML\" \" \")\n         (set-cursor 0)\n         (aset \"innerHTML\" \"\"))\n       (set-selection node idx idx)))))\n\n(defn set-cursor-to-end\n  ([node] (set-cursor-to-end node {}))\n  ([node opts]\n   (let [node      (or (.-lastElementChild node) node)\n         txt-count (count (.-textContent node))]\n     (set-cursor node txt-count opts))))\n\n(defn code-block [str]\n  [:div.bg-dark-gray.pa1.br2 [:code.f6 {:style {:white-space :pre-wrap}} str]])\n\n(defn pretty-code-block\n  ([x] (pretty-code-block pp/*print-right-margin* x))\n  ([margin-width x]\n   (binding [pp/*print-right-margin* margin-width]\n     [code-block (u/pretty-str x)])))\n\n(defn example [{:keys [title source details root open-details?]}]\n  [:<>\n   [:div.pv2.ph3.bg-near-black.white\n    [:div.flex.justify-between\n     [:h2.fw2 title]\n     (when source\n       [:a.white.link {:href source}\n        [:div.pa2.tracked.f6 \"SOURCE\"]])]\n    (when details\n      [:details\n       {:open open-details?}\n       [:summary.outline-0.pointer \"Implementation Details\"]\n       [:div.pl3\n        details]])]\n   [:div.pa3 root]])\n"]}