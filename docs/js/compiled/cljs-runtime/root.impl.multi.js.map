{"version":3,"sources":["root/impl/multi.cljc"],"mappings":";;AAEA,AAeA,AAAA,AAAAA,AAAMO;AAAN,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWO;AADX,AAAAH,AAAAJ,AAAA,AACuBQ;AADvB,AAAAJ,AAAAJ,AAAA,AAC2CS;AAD3C,AAAA,AAES,AAACC,AAAKH;AAFf;AAAA,AAAA,AAAA,AAAAF,AAAA;;;AAGE,AAAMI,AAAU,AAAAE,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAc,AAAYC,AAAEC;AAAd,AAAiB,AAACD,AAAAA,AAAAA,AAAEC,AAAAA;;;;AAAlD,AACMC;AACAC,AAAU,AAAA,AAACC,AACCF,AACA,AAAAH,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AACI,AAAsBE;AAAtB,AACE,AACC,AAAA,AAAA,AAAA,AAACI,AACkCJ;;;;AAR5D,AAAA,AAAA,AASkB,AAAgBK,AAAaN;AAA7B,AACE,AAACO,AAAMJ,AAAMK,AAAMF,AAAaN;AAVpD,AAWkB,AAAmBM;AAAnB,AACE,AAACG,AAAMN,AAAMO,AAAOJ;AAZxC,AAakB,AAAcL;AAAd,AACE,AAAMK,AAAa,AAACX,AAAAA,AAAAA,AAAYM,AAAAA;AAAhC,AAAAU,AACMC,AAAcT;AACdH,AAAa,AAAAD,AAAI,AAACP,AAAIoB,AAAEN;AAAX,AAAA,AAAAP;AAAAA;;AACI,AAACP,AAAIoB,AAAEV;;;AAH9B,AAIE,AAACL,AAAAA,AAAAA,AAAUG,AAAAA,AAAEC,AAAAA;AAlBnC,AAmBkBE","names":["p__101047","map__101048","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","root.impl.multi/multi-dispatch","dispatch-fn","default-dispatch-fn","invoke-fn","cljs.core/ifn?","or__4185__auto__","f","x","default","table","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","dispatch-val","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core/deref","t"],"sourcesContent":["(ns root.impl.multi)\n\n(comment\n\n (defprotocol IMultiFn\n   (-reset [mf])\n   (-add-method [mf dispatch-val method])\n   (-remove-method [mf dispatch-val])\n   (-prefer-method [mf dispatch-val dispatch-val-y])\n   (-get-method [mf dispatch-val])\n   (-methods [mf])\n   (-prefers [mf])\n   (-default-dispatch-val [mf])\n   (-dispatch-fn [mf]))\n\n )\n\n(defn multi-dispatch\n  [{:keys [dispatch-fn default-dispatch-fn invoke-fn]}]\n  {:pre [(ifn? dispatch-fn)]}\n  (let [invoke-fn (or invoke-fn (fn invoke [f x] (f x)))\n        default   :default\n        table     (atom\n                   {default\n                    (or default-dispatch-fn\n                        (fn default-dispatch [x]\n                          (throw\n                           (ex-info\n                            \"No default method defined\" {:arg x}))))})]\n    {:add-method    (fn add-method [dispatch-val f]\n                      (swap! table assoc dispatch-val f))\n     :remove-method (fn remove-method [dispatch-val]\n                      (swap! table dissoc dispatch-val))\n     :dispatch      (fn dispatch [x]\n                      (let [dispatch-val (dispatch-fn x)\n                            t            @table\n                            f            (or (get t dispatch-val)\n                                             (get t default))]\n                        (invoke-fn f x)))\n     :method-table  table}))\n"]}