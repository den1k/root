{"version":3,"sources":["examples/fetch/views.cljs"],"mappings":";;;;;;AAMA,AAAA,AAAMA,AAAYC;AAAlB,AACE,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAA,AAAA,AAAAC,AAAU,AAACQ,AAASV;AAApB,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AACU,AAAAA;;;AADV,AAAA,AAAAD,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAG,AAAA,AAAAD;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAEU,AAAAA,AAAA,AAAA,AAACO;;;AAFX,AAAA,AAAAN,AAAAH;;AAAA,AAAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAAA,AAAAG;AAAA,AAAA,AAAAD,AAAAF;;AAIF,AAAKM,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAGe,AAAKC;AAAL,AAAQ,AAAA,AAACC,AAAID;;AAE/B,AAAAE,AAAA;AAAAC,AAAA;AAAAC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAL,AAAAK,AAAA,AAAaI;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGUA;;AAJZ,AAAA,AAAAR,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACN,AAAAA,AAAAA;AAMD,AAAAa,AAAA;AAAAC,AAAA;AAAAC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAA,AAAAd,AAAAc,AAAA,AAAaC;AAAb,AAAAf,AAAAc,AAAA,AAAqBE;AAArB,AAAAhB,AAAAc,AAAA,AAAgCG;AAAhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEYA,AACJD;;AAJV,AAAA,AAAAN,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACf,AAAAA,AAAAA;AAMD,AAAAqB,AAAA;AAAAC,AAAA;AAAAC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AAAaL;AAAb,AAAAjB,AAAAsB,AAAA,AAAmBC;AAAnB,AAAAvB,AAAAsB,AAAA,AAAsBE;AAAtB,AAAAxB,AAAAsB,AAAA,AAA0BG;AAA1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEmCD,AAAYP,AAAgB,AAAA,AAAWM,AACxDE;;AAJpB,AAAA,AAAAP,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACvB,AAAAA,AAAAA;AAMD,AAAA6B,AAAA;AAAAC,AAAA;AAAAC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAA,AAAA9B,AAAA8B,AAAA,AAAab;AAAb,AAAAjB,AAAA8B,AAAA,AAAmBP;AAAnB,AAAAvB,AAAA8B,AAAA,AAAsBL;AAAtB,AAAAzB,AAAA8B,AAAA,AAA4BC;AAA5B,AACE,AAAA,AAAA,AAAA,AAAMC,AAAoBf,AAAYM;AAAtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGI,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAQF,AACNC,AAEqBA,AAC6BD,AAItCN;;AAbtB,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC/B,AAAAA,AAAAA;AAeD,AAAKqC,AACH,AAAA,AAAA,AAAAC,AAAA,AAAAjD,AAAA,AACGmD,AAAO,AAAA,AAACrD;AADX,AAAA,AAAAE,AAAA,AAEGoD,AAAO,AAAA,AAACC,AAAQF;AAFnB,AAAA,AAAAnD,AAGU,AAACuD,AACA,AAACC,AACA,AAACC,AAAK3D,AACA,AAAK4D;AAAL,AACE,AAAA,AAAA,AAAmDA;AAPvE,AAGGJ,AAKSF;AARZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAUY,AAAA,AAAA,AAAY,AAACO,AAAML,AACnB,AAACM,AAAIN;;;;AAXjB,AAAAjD,AAAA6C;AAAA,AAAA,AAAA3C,AAAAF;;AAaF,AAAA,AAAewD;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAeKC,AAMHpD,AAE+BqC;;;AAEpC,AAAA,AAAegB,AAAWC;AAA1B,AACE,AAAA,AAACC,AAAgBL,AAAcI","names":["examples.fetch.views/fetch-json","str","kitchen_async.promise.then.cljs$core$IFn$_invoke$arity$2","v__49832__auto__","fexpr__102944","G__102941","fexpr__102945","e__49766__auto__","e102943","kitchen-async.promise/reject","e102942","js/fetch","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","examples.fetch.views/root","root.impl.core/ui-root","x","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__102946","G__102947","G__102948","p__102949","map__102950","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","markup","G__102955","G__102956","G__102957","p__102961","map__102962","content","content-ui","title","G__102965","G__102966","G__102967","p__102968","map__102969","by","url","score","G__102974","G__102975","G__102976","p__102977","map__102982","text","title-hic","cljs.core/not","examples.fetch.views/data-promise","kitchen-async.promise/->promise","e102991","pdata","top-50","cljs.core.take.cljs$core$IFn$_invoke$arity$2","items","kitchen-async.promise/all","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","post-id","cljs.core/count","cljs.core/vec","examples.fetch.views/example-root","examples.util.dom/example","examples.util.dom/pretty-code-block","examples.fetch.views/render-fn","dom-node","uix.dom.alpha/render"],"sourcesContent":["(ns examples.fetch.views\n  (:require [root.impl.core :as rc]\n            [kitchen-async.promise :as p]\n            [examples.util.dom :as ud]\n            [uix.dom.alpha :as uix.dom]))\n\n(defn fetch-json [str]\n  (p/some-> (js/fetch str)\n            (.json)\n            (js->clj :keywordize-keys true)))\n\n(def root\n  (rc/ui-root\n   {:dispatch-fn  :type\n    :content-keys [:content]\n    :content-spec (fn [x] (get x :id))}))\n\n(root :view :loading\n  (fn [{:keys [markup]}]\n    [:<>\n     [:h1 \"Loading...\"]\n     [:span markup]]))\n\n(root :view :ordered-list\n  (fn [{:keys [content content-ui title]}]\n    [:div\n     [:h2.pl2 title]\n     [:ol content-ui]]))\n\n(root :view \"story\"\n  (fn [{:keys [title by url score]}]\n    [:li.pa1.hover-bg-light-gray\n     [:div [:div.dib [:a.link {:href url} [:span title]]] [:span (str \" - \" by)]]\n     [:span.f6.gray score \" points\"]]))\n\n(root :view \"job\"\n  (fn [{:keys [title by score text]}]\n    (let [title-hic [:div.dib title \" - \" by]]\n      [:li.pa1.bg-light-yellow\n       [:div.flex.items-center\n        (if-not text\n          title-hic\n          [:details\n           [:summary.outline-0 title-hic]\n           [:div.ph3.pt2 {:dangerouslySetInnerHTML {:__html text}}]])\n        [:span.ph2.pv1.ml2.code.self-center.bg-light-gray.ba.br2\n         {:style {:font-size \"0.7rem\"}}\n         \"job\"]]\n       [:span.f6.gray score \" points\"]])))\n\n(def data-promise\n  (p/let\n    [pdata  (fetch-json \"https://hacker-news.firebaseio.com/v0/topstories.json\")\n     top-50 (take 50 pdata)\n     items  (p/all\n             (mapv\n              (comp fetch-json\n                    (fn [post-id]\n                      (str \"https://hacker-news.firebaseio.com/v0/item/\" post-id \".json\")))\n              top-50))]\n    {:type    :ordered-list\n     :title   (str \"Top \" (count items) \" Posts\")\n     :content (vec items)}))\n\n(defn ^:export example-root []\n  [ud/example\n   {:title\n    \"Hackernews Reader (implicit promise resolve)\"\n    :source\n    \"https://github.com/den1k/root/blob/master/dev/examples/fetch/views.cljs\"\n    :open-details?\n    true\n    :details\n    [:<>\n     [:p \"This root is passed a promise that pulls hackernews data under the\n        \" [:code.red \":data\"] \" key.\n        The promise is implicitly resolved by root's resolver and passed\n        to root to render.\"]\n     [:div \"The root is also passed a loading state\"\n      [:div.pv1\n       [ud/pretty-code-block\n        {:loading {:type   :loading\n                   :markup \"Your favorite posts\"}\n         :promise '<data-promise>}]]\n      [:span.f6.silver \"(if you don't see it try throttling your network in devtools)\"]]]\n    :root\n    [root :resolve {:data {:loading {:type   :loading\n                                     :markup \"Your favorite posts\"}\n                           :promise data-promise}}]}])\n\n(defn ^:export render-fn [dom-node]\n  (uix.dom/render [example-root] dom-node))\n"]}