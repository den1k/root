{"version":3,"sources":["root/impl/entity.cljc"],"mappings":";;;;AAOA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAYC;AACZ,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAcE;AACd,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWE;AAAX,AAAA,AAAAD,AAAAD;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEhB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAaC;AACb,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAkB,AAAAG,AAAA,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAUP,AAAS,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAnB,AAAA,AAAAJ,AAAAD;AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAClB,AAAAZ,AAAA,AAAA,AAAA,AAAA,AAAc,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACd,AAAAd,AAAA,AAAA,AAAA,AAAA,AAAA;AAEA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAeU;AAEf,AAAAV,AAAA,AAAA,AAAA,AAAA,AACE,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAN,AAAAM;AAAA,AAAAA;AAAA,AAAA,AAAAN,AAAAM;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEF,AAAAhB,AAAA,AAAA,AAAA,AAAA,AACE,AAACiB,AACA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAR,AAAAQ;AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAAD,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAR,AAAAQ,AAAA,AAAAC,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["cljs.spec.alpha/def-impl","cljs.core/integer?","cljs.core/keyword?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__102498","cljs.core/coll?","cljs.core/string?","G__102504","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__102507","cljs.core/map?","i__13771__auto__","v__13772__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha/map-spec-impl","G__102509","cljs.spec.alpha/nonconforming","G__102511","cljs.core/contains?"],"sourcesContent":["(ns root.impl.entity\n  (:require [#?(:clj  clojure.spec.alpha\n                :cljs cljs.spec.alpha) :as s]\n            [#?(:clj  clojure.core\n                :cljs cljs.core) :as core]\n            [root.impl.util :as u]))\n\n(s/def ::id integer?)\n(s/def ::type keyword?)\n(s/def ::markup (s/coll-of string?))\n\n(s/def ::ref integer?)\n(s/def ::refs-coll (s/coll-of ::ref))\n(s/def ::refs-map (s/map-of keyword? (s/or :ref ::ref :refs ::refs-coll)))\n(s/def ::refs (s/or :ref ::ref :refs ::refs-coll :refs-map ::refs-map))\n(s/def ::content ::refs)\n\n(s/def ::attrs map?)\n\n(s/def ::partial-entity\n  (s/keys :opt-un [::id ::type ::content ::markup ::attrs]))\n\n(s/def ::entity\n  (s/nonconforming\n   (s/keys :req-un [::id] :opt-un [::type ::content ::markup ::attrs])))\n"]}