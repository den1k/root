{"version":3,"sources":["uix/core/alpha.cljc"],"mappings":";;;;;;;AAaG,AAAM,AAAcA,AACT,AAAAC;AADX,AAEE,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AACP,AAAMC,AAAM,AAAA,AAACC;AACPC,AAAkB,AAAKC;AAAL,AACE,AAACC,AAAQJ,AAAMG;;AACnCE,AAAkB;AAAA,AACE,AAAAC,AAAc,AAAA,AAAAC,AAASP;AAAvB,AAAA,AAAAM;AAAA,AAAAA,AAASE;AAAT,AACEA;;AADF,AAAAD,AAEGP;;;AAN7B,AAOMS,AAAiBJ,AACAH;AARvB,AASE,AAAA,AAAiBQ,AAAUC,AAAkBF;;;;AAZnD;AAcH,AAAA,AAIA,AAAA,AAAMG,AAAaC;AAAnB,AAAA,AAAA,AACeC,AAAaD;;AAG5B,AAAA,AAAAE,AAAMM,AAAUR;AAAhB,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAgDQ;AAAhD,AAAAJ,AAAAJ,AAAA,AAA8BM;AAA9B,AAAAF,AAAAJ,AAAA,AAAiCO;AAAjC,AAAA,AAAA,AACeE,AAAWD,AAAMX;;AAI5B;;;AAAA,AAAAa,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAP,AAAAO,AAAA,AAEWE;AAFX,AAAAT,AAAAO,AAAA,AAEuBG;AAFvB,AAAAV,AAAAO,AAAA,AAE8BI;AAF9B,AAGE,AAAMC,AAAK,AAAKC;AAAL,AACE,AAAA,AAASC;AAAT,AACE,AAAQC,AAAYD,AAAK;;AACzB,AAAML;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAYK,AAAAA,AAAKD,AAAAA;;AADpB;;AAHJ;;AAAX,AAME,AAAM,AAAaD,AAAM,AAAStB,AAAU,AAAayB;;AACzD,AAAAC,AAAmBN;AAAnB,AAAA,AAAA,AAAAO,AAAAD;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAAI,AAAA,AAAAC,AAAAL;;AAAA,AAAA,AAAAM,AAAAJ;AAAA,AAAAK,AAAAD,AAAA,AAAA,AAAcE;AAAd,AAAAD,AAAAD,AAAA,AAAA,AAAgBvC;AAAhB,AACE,AAAM6B,AAAK,AAACa,AAAKD,AAAGzC;;AADtB,AAAA,AAAAkC,AAAAG;AAAA,AAAA,AAAA,AAAAD,AAAAC;AAAA,AAAAC,AAAAD;;;;;AAAA;;;;AAAA;;AAEA,AAAAJ,AAAmBL;AAAnB,AAAA,AAAA,AAAAM,AAAAD;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAAI,AAAA,AAAAC,AAAAL;;AAAA,AAAA,AAAAU,AAAAR;AAAA,AAAAK,AAAAG,AAAA,AAAA,AAAcF;AAAd,AAAAD,AAAAG,AAAA,AAAA,AAAgB3C;AAAhB,AACE,AAAM,AAAa6B,AAAM,AAACa,AAAKD,AAAGzC;;AADpC,AAAA,AAAAkC,AAAAG;AAAA,AAAA,AAAA,AAAAD,AAAAC;AAAA,AAAAC,AAAAD;;;;;AAAA;;;;AAAA;;AAEAR;;AAEP;;;;;;;;AAAA,AAAAe,AAAMG,AASHK;AATH,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/B,AAAA,AAAA+B,AAAA,AAAA,AAAA,AAAA,AAAA9B,AAAAC,AAAA6B,AAAAA;AAAA,AAAAC,AAAAD,AAAA,AAOWG,AACW,AAAK,AAAA,AAACG;AAR5B,AAAAlC,AAAA4B,AAAA,AAOwBI;AAPxB,AAAAhC,AAAA4B,AAAA,AAOqCK;AAPrC,AAWM,AAAMxB,AAAY,AAAyBK,AAAKsB;AAA9B,AACE,AAAA,AAAA,AAAM,AAAStB;;AACf,AAAAuB,AAAU,AAASvB;AAAnB,AAAA,AAAA,AAAA,AAAAuB,AAAAxC;;AAAA,AAAA,AAAAwC,AAEE,AAASC;AAAT,AAAA,AAAA,AAASA;AAAT,AACE,AAAA,AAAIxB;;;AAHR,AAAA,AAAAuB,AAAAxC;;AAAA,AAAA,AAAAwC,AAKE,AAAUC,AAAEC;AAAZ,AAAA,AAAA,AAAUD;AAAV,AACE,AAAA,AAAWxB,AAAgByB;;AAC3BA;;;AAPJ,AAAA,AAAAF,AAAAxC;;AAAA,AAAA,AAAAwC,AASE,AACIC,AAAEE;AADN,AAAA,AAAA,AACIF;AADJ,AAEG,AAACG,AAAQH,AAAE,AAAAI,AAAG,AAACC,AAAOL;AAAX,AAAA,AAAAI,AAAAA,AAACF,AAAAA,AAAAA;;;;AAXjB,AAAA,AAAAH,AASE,AAGIC,AAAEE,AAAEI;AAHR,AAAA,AAAA,AAGIN;AAHJ,AAIG,AAACG,AAAQH,AAAE,AAAAO,AAAG,AAACF,AAAOL;AAAXQ,AAAcF;AAAd,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACN,AAAAA,AAAAA;;;;AAbjB,AAAA,AAAAH,AASE,AAKIC,AAAEE,AAAEI,AAAEG;AALV,AAAA,AAAA,AAKIT;AALJ,AAMG,AAACG,AAAQH,AAAE,AAAAU,AAAG,AAACL,AAAOL;AAAXW,AAAcL;AAAdM,AAAgBH;AAAhB,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACV,AAAAA,AAAAA;;;;AAfjB,AAAA,AAAAH,AASE,AAOIC,AAAEE,AAAEI,AAAEG,AAAEI;AAPZ,AAAA,AAAA,AAOIb;AAPJ,AAQG,AAACG,AAAQH,AAAE,AAACc,AAAMZ,AAAE,AAACG,AAAOL,AAAGM,AAAEG,AAAEI;;;AAjBxCd;;AAkBdgB,AAAa,AAAKC;AAAL,AAAA,AAAuB,AAACtB,AAAAA,AAAAA,AAAasB,AAAAA;;AAClDC,AAAO;AAAA,AACE,AAAA,AAASzC;AAAT,AACE,AAAM0C,AAAK,AAAA,AAAI1C;AACT2C,AAAM,AAAS3C;AADrB,AAEE,AAAA4C,AAAI,AAACvB,AAAAA,AAAAA,AAAUsB,AAAAA,AAAMD,AAAAA;AAArB,AAAA,AAAAE,AAAAA,AACIC,AAAAA,AAAAA;;AACjBC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpD,AAA2BC,AACSsB,AACasB,AACJpB,AACXsB;AA/B/C,AAgCE;AAAOC;AAAP,AACE,AAAAK,AAAiBD;AAAjBE,AAAA,AAAkCN;AAAlC,AAAA,AAAAK,AAAAC,AAACC;;;AADIP;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AASb,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAASY,AAEMG;;AAFf,AAAA,AAAA,AAEUzD;AAFV,AAGI,AAAC0D,AAAO1D,AAAKyD;;;AAHjB,AAAA,AAAA,AAAA,AAASH,AAMC9B;;AANV,AAAA,AAAA,AAMUA;AANV,AAMa,AAACmC,AAAYnC;;;AAN1B,AAAA,AAAA,AAAA,AAAS8B,AASE9B;;AATX,AAAA,AAAA,AASWA;AATX,AAUIgC;;;AAVJ,AAAA,AAAA,AAAA,AAASF,AAaM9B,AAAEoC,AAAOC;;AAbxB,AAAA,AAAA,AAaerC;AAbf,AAcI,AAAA,AAAC6B,AAAOO;;AACR,AAAA,AAAA,AAACE,AAAgB,AAAQtC,AAAIoC,AAAOC;;AACpC,AAAA,AAACR,AAAOO;;;AAhBZ,AAAA,AAAA,AAASN;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAUC;AAAnB,AAAA,AAAAF,AAAmBE;;;AAAVF,AAkBZ,AAAA;;;AAAA,AAAAS,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAGG,AAAA,AAACE;;;AAHJ,AAAA,AAAA,AAAMF,AAIFhG;AAJJ,AAKY,AAAAqF,AAAWrF;;;AALvB,AAAA,AAAA,AAAMgG;;AAAN,AAQA,AAAA;;;;;;;;;;AAAA,AAAAF,AAAMM;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMG,AASF3C;AATJ,AAUG,AAAC4C,AAAQ5C,AAAW6C;;;AAVvB,AAAA,AAAA,AAAMF,AAYF3C,AAAE8C;AAZN,AAaY,AAAAC,AAAA,AAAAC;AAAA,AAAa,AAACG,AAAoB,AAAC7F,AAAM0C,AAAE,AAACnB,AAAK,AAAAmE;;AAAjDC,AACYH;AADZ,AAAA,AAAAC,AAAAE,AAACC;;;AAbb,AAAA,AAAA,AAAMP;;AAAN,AAiBA;;;AAAA,AAAMS,AAEHpD;AAFH,AAGW,AAAA,AAAM,AAAeA;;AAEhC;;;AAAA,AAAMqD,AAEHjH;AAFH,AAGE,AAACkH,AAAYlH;;AAEf,AAAA;;;;;AAAA,AAAAiG,AAAMmB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMgB,AAIFC;AAJJ,AAKG,AAACC,AAAcD;;;AALlB,AAAA,AAAA,AAAMD,AAMFC,AAASE;AANb,AAOG,AAACC,AAAcH,AAASE;;;AAP3B,AAAA,AAAA,AAAMH;;AAAN,AASA,AAAA;;;;;AAAA,AAAAnB,AAAMyB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMsB,AAIFL;AAJJ,AAKG,AAACM,AAAqBN;;;AALzB,AAAA,AAAA,AAAMK,AAMFL,AAASE;AANb,AAOG,AAACK,AAAqBP,AAASE;;;AAPlC,AAAA,AAAA,AAAMG;;AAAN,AASA,AAAA;;;AAAA,AAAAzB,AAAM6B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM0B,AAEFlE;AAFJ,AAGG,AAACmE,AAAWnE;;;AAHf,AAAA,AAAA,AAAMkE,AAIFlE,AAAE2D;AAJN,AAKG,AAACS,AAAWpE,AAAE2D;;;AALjB,AAAA,AAAA,AAAMO;;AAAN,AAOA,AAAA;;;AAAA,AAAA7B,AAAMiC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA9B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM8B;AAAN,AAGG,AAAA,AAACC;;;AAHJ,AAAA,AAAA,AAAMD,AAIFlI;AAJJ,AAKG,AAACmI,AAAUnI;;;AALd,AAAA,AAAA,AAAMkI;;AAAN,AAOA,AAAA;;;AAAA,AAAAjC,AAAMoC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMiC,AAEFzE;AAFJ,AAGG,AAAC0E,AAAe1E;;;AAHnB,AAAA,AAAA,AAAMyE,AAIFzE,AAAE2D;AAJN,AAKG,AAACgB,AAAe3E,AAAE2D;;;AALrB,AAAA,AAAA,AAAMc;;AAAN,AAOA;;;;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAC,AAAAsH,AAAAA;AAAAA,AAK4CI;AAL5C,AAAAzH,AAAAqH,AAAA,AAKWE;AALX,AAAAvH,AAAAqH,AAAA,AAK6BG;AAL7B,AAME,AAACE,AAAgBD;;AAGhB,AAAA,AAAME,AAAgB5I;AAAtB,AACE,AAAC6I,AAAoB7I;;AAe1B;;;AAAA,AAAM8I,AAEH9I;AAFH,AAGE,AAAC+I,AAAc/I;;AA0CjB,AAAA,AAAM4E,AAAYoE;AAAlB,AAAA;AAEW,AAACpC,AAAoBoC;;AAGhC;;;AAAA,AAAMC,AAEHxF;AAFH,AAGW,AAACyF,AAAkBzF;;AAG9B,AAAA,AAAM0F,AAAkB1F;AAAxB,AAAA;AAEE,AAAC2F,AAA0B3F","names":["js/goog.DEBUG","js/__REACT_DEVTOOLS_GLOBAL_HOOK__","js/uix","js/uix.core","js/uix.core.alpha","js/uix.core.alpha.__devtools-hook","uix.core.alpha/__devtools-hook","value","cljs.core/volatile!","react-type-setter","v","cljs.core/vreset!","react-type-getter","temp__5737__auto__","cljs.core/deref","uixf","config","js/Object","js/window","uix.core.alpha/strict-mode","child","js/module$node_modules$react$index.StrictMode","p__100898","map__100899","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uix.core.alpha/profiler","id","on-render","attrs","js/module$node_modules$react$index.Profiler","p__100901","map__100902","uix.core.alpha/create-class","constructor","static","prototype","ctor","props","this","js/module$node_modules$react$index.Component","v__40233__auto__","cljs.core/seq","x__40234__auto__","cljs.core/first","xs__40235__auto__","cljs.core/next","vec__100908","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","cljs.core/name","vec__100914","p__100917","map__100918","cljs.core.get.cljs$core$IFn$_invoke$arity$3","uix.core.alpha/create-error-boundary","display-name","error->state","handle-catch","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","render-fn","_","x100920","o","new-value","f","cljs.core/-reset!","G__100921","cljs.core/-deref","a","G__100922","G__100923","b","G__100924","G__100925","G__100926","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","derive-state","error","render","args","state","G__100927","uix.core.alpha/as-element","klass","G__100928","G__100929","js/module$node_modules$react$index.createElement","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","uix.core.alpha/ReactRef","uix.core.alpha/->ReactRef","current","other","cljs.core/-equiv","goog/getUid","writer","opts","cljs.core/pr-writer","var_args","G__100931","uix.core.alpha/create-ref","js/Error","uix.core.alpha.create_ref.cljs$core$IFn$_invoke$arity$1","G__100934","uix.core.alpha/memoize","uix.core.alpha.memoize.cljs$core$IFn$_invoke$arity$2","uix.compiler.alpha/*default-compare-args*","should-update?","G__100935","p1__100932#","G__100936","js/module$node_modules$react$index.memo","uix.compiler.alpha/as-element","uix.core.alpha/no-memoize!","uix.core.alpha/state","uix.hooks.alpha/state","G__100938","uix.core.alpha/effect!","setup-fn","uix.hooks.alpha.effect_BANG_.cljs$core$IFn$_invoke$arity$1","deps","uix.hooks.alpha.effect_BANG_.cljs$core$IFn$_invoke$arity$2","G__100940","uix.core.alpha/layout-effect!","uix.hooks.alpha.layout_effect_BANG_.cljs$core$IFn$_invoke$arity$1","uix.hooks.alpha.layout_effect_BANG_.cljs$core$IFn$_invoke$arity$2","G__100942","uix.core.alpha/memo","uix.hooks.alpha.memo.cljs$core$IFn$_invoke$arity$1","uix.hooks.alpha.memo.cljs$core$IFn$_invoke$arity$2","G__100944","uix.core.alpha/ref","uix.hooks.alpha/ref","G__100946","uix.core.alpha/callback","uix.hooks.alpha.callback.cljs$core$IFn$_invoke$arity$1","uix.hooks.alpha.callback.cljs$core$IFn$_invoke$arity$2","p__100947","map__100948","uix.core.alpha/subscribe","get-current-value","subscribe","subscription","uix.hooks.alpha/subscribe","uix.core.alpha/create-context","js/module$node_modules$react$index.createContext","uix.core.alpha/context","uix.hooks.alpha/context","x","uix.core.alpha/as-react","uix.compiler.alpha/as-react","uix.core.alpha/add-transform-fn","uix.compiler.alpha/add-transform-fn"],"sourcesContent":["(ns uix.core.alpha\n  \"Public API\"\n  (:refer-clojure :exclude [ref memoize])\n  #?(:cljs (:require-macros [uix.core.alpha]))\n  (:require #?(:cljs [react :as r])\n            [uix.compiler.alpha :as compiler]\n            [uix.compiler.aot :as uixr]\n            [uix.lib :refer [doseq-loop]]\n            [uix.hooks.alpha :as hooks]))\n\n;; See https://twitter.com/roman01la/status/1182405182057058314?s=20\n;; for context\n#?(:cljs\n   (when (and ^boolean goog.DEBUG\n              (exists? js/__REACT_DEVTOOLS_GLOBAL_HOOK__))\n     (defonce __devtools-hook\n       (let [value (volatile! nil)\n             react-type-setter (fn [v]\n                                 (vreset! value v))\n             react-type-getter (fn []\n                                 (if-let [uixf (.-uixf @value)]\n                                   uixf\n                                   @value))\n             config #js {:get react-type-getter\n                         :set react-type-setter}]\n         (.defineProperty js/Object js/window \"$type\" config)))))\n\n(declare as-element)\n\n;; React's top-level API\n\n(defn strict-mode [child]\n  #?(:cljs [:> r/StrictMode child]\n     :clj child))\n\n(defn profiler [child {:keys [id on-render] :as attrs}]\n  #?(:cljs [:> r/Profiler attrs child]\n     :clj child))\n\n#?(:cljs\n    (defn create-class\n      \"Creates class based React component\"\n      [{:keys [constructor static prototype]}]\n      (let [ctor (fn [props]\n                   (this-as this\n                     (.apply r/Component this (js-arguments))\n                     (when constructor\n                       (constructor this props)))\n                   nil)]\n        (set! (.-prototype ctor) (.create js/Object (.-prototype r/Component)))\n        (doseq-loop [[k v] static]\n          (aset ctor (name k) v))\n        (doseq-loop [[k v] prototype]\n          (aset (.-prototype ctor) (name k) v))\n        ctor)))\n\n (defn create-error-boundary\n   \"Creates React's Error Boundary component\n\n    display-name \u2014 the name of the component to be displayed in stack trace\n    error->state \u2014 maps error object to component's state that is used in render-fn\n    handle-catch \u2014 for side-effects, logging etc.\n    render-fn \u2014 takes state value returned from error->state and a vector of arguments passed into error boundary\"\n   [{:keys [display-name error->state handle-catch]\n     :or {display-name (str (gensym \"error-boundary\"))}}\n    render-fn]\n   #?(:cljs\n       (let [constructor (fn [^js/React.Component this _]\n                           (set! (.-state this) #js {:argv nil})\n                           (specify! (.-state this)\n                             IDeref\n                             (-deref [o]\n                               (.. this -state -argv))\n                             IReset\n                             (-reset! [o new-value]\n                               (.setState this #js {:argv new-value})\n                               new-value)\n                             ISwap\n                             (-swap!\n                               ([o f]\n                                (-reset! o (f (-deref o))))\n                               ([o f a]\n                                (-reset! o (f (-deref o) a)))\n                               ([o f a b]\n                                (-reset! o (f (-deref o) a b)))\n                               ([o f a b xs]\n                                (-reset! o (apply f (-deref o) a b xs))))))\n             derive-state (fn [error] #js {:argv (error->state error)})\n             render (fn []\n                      (this-as this\n                        (let [args (.. this -props -argv)\n                              state (.-state this)]\n                          (-> (render-fn state args)\n                              as-element))))\n             klass (create-class {:constructor constructor\n                                  :static {:displayName display-name\n                                           :getDerivedStateFromError derive-state}\n                                  :prototype {:componentDidCatch handle-catch\n                                              :render render}})]\n         (fn [& args]\n           (r/createElement klass #js {:argv args})))\n\n      :clj ^::error-boundary {:display-name display-name\n                              :render-fn render-fn\n                              :handle-catch handle-catch\n                              :error->state error->state}))\n\n#?(:cljs\n   (deftype ReactRef [current]\n     Object\n     (equiv [this other]\n       (-equiv this other))\n\n     IHash\n     (-hash [o] (goog/getUid o))\n\n     IDeref\n     (-deref [o]\n       current)\n\n     IPrintWithWriter\n     (-pr-writer [o writer opts]\n       (-write writer \"#object [uix.core.alpha.ReactRef \")\n       (pr-writer {:val (-deref o)} writer opts)\n       (-write writer \"]\"))))\n\n(defn create-ref\n  \"Creates React's ref type object.\"\n  ([]\n   (create-ref nil))\n  ([v]\n   #?(:cljs (ReactRef. v)\n      :clj (atom v))))\n\n(defn memoize\n  \"Takes component `f` and comparator function `should-update?`\n  that takes previous and next props of the component.\n  Returns memoized `f`.\n\n  When `should-update?` is not provided uses default comparator\n  that compares props with clojure.core/=\n\n  UIx components are memoized by default\"\n  ([f]\n   (memoize f #?(:cljs compiler/*default-compare-args*\n                 :clj nil)))\n  ([f should-update?]\n   #?(:cljs (react/memo #(compiler/as-element (apply f (next (.-argv %))))\n                        should-update?)\n      :clj f)))\n\n(defn no-memoize!\n  \"Disables memoization of the `f` component\"\n  [f]\n  #?(:cljs (set! (.-uix-no-memo f) true)))\n\n(defn state\n  \"Takes initial value and returns React's state hook wrapped in atom-like type.\"\n  [value]\n  (hooks/state value))\n\n(defn effect!\n  \"Takes a function to be executed in an effect and optional vector of dependencies.\n\n  See: https://reactjs.org/docs/hooks-reference.html#useeffect\"\n  ([setup-fn]\n   (hooks/effect! setup-fn))\n  ([setup-fn deps]\n   (hooks/effect! setup-fn deps)))\n\n(defn layout-effect!\n  \"Takes a function to be executed in a layout effect and optional vector of dependencies.\n\n  See: https://reactjs.org/docs/hooks-reference.html#uselayouteffect\"\n  ([setup-fn]\n   (hooks/layout-effect! setup-fn))\n  ([setup-fn deps]\n   (hooks/layout-effect! setup-fn deps)))\n\n(defn memo\n  \"Takes function f and optional vector of dependencies, and returns memoized f.\"\n  ([f]\n   (hooks/memo f))\n  ([f deps]\n   (hooks/memo f deps)))\n\n(defn ref\n  \"Takes optional initial value and returns React's ref hook wrapped in atom-like type.\"\n  ([]\n   (hooks/ref nil))\n  ([value]\n   (hooks/ref value)))\n\n(defn callback\n  \"Takes function f and optional vector of dependencies, and returns f.\"\n  ([f]\n   (hooks/callback f))\n  ([f deps]\n   (hooks/callback f deps)))\n\n(defn subscribe\n  \"subscribe - fn, takes callback, sets up a listener on external event emitter\n               which calls the callback and returns a function that unsets the listener.\n\n  get-current-value - fn, returns current state of the external event emitter\"\n  [{:keys [get-current-value subscribe] :as subscription}]\n  (hooks/subscribe subscription))\n\n#?(:cljs\n   (defn create-context [v]\n     (react/createContext v)))\n\n#?(:clj\n   (defmacro defcontext\n     \"cljs: Creates React context with initial value set to `value`.\n     clj: Create dynamic var bound to `value`.\"\n     ([name]\n      (if &env\n        `(def ~(with-meta name {:dynamic true}) (create-context nil))\n        `(def ~(with-meta name {:dynamic true}))))\n     ([name value]\n      (if &env\n        `(def ~(with-meta name {:dynamic true}) (create-context ~value))\n        `(def ~(with-meta name {:dynamic true}) ~value)))))\n\n(defn context\n  \"Takes React context and returns its current value\"\n  [v]\n  (hooks/context v))\n\n#?(:clj\n   (defmacro context-provider\n     \"Takes a binding form where `ctx` is React context and `value` is a supplied value\n     and any number of and child components.\n     cljs: Injects provided value into the context for current components sub-tree.\n     clj: Creates new bindings for `ctx` with supplied `value`, see clojure.core/binding \"\n     [[ctx value] & children]\n     (if &env\n       (into [:> `(.-Provider ~ctx) {:value value}]\n             children)\n       `(binding [~ctx ~value]\n          ~(into [:<>] children)))))\n\n#?(:clj\n   (defmacro with-effect\n     \"Convenience macro for effect hook.\"\n     [deps & body]\n     `(hooks/with-effect ~deps ~@body)))\n\n#?(:clj\n   (defmacro with-layout-effect\n     \"Convenience macro for layout effect hook.\"\n     [deps & body]\n     `(hooks/with-layout-effect ~deps ~@body)))\n\n#?(:clj\n   (defmacro html\n     \"Compiles Hiccup into React elements at compile-time.\"\n     [expr]\n     (uixr/compile-html expr &env)))\n\n#?(:clj\n   (defmacro defui\n     \"Compiles UIx component into React component at compile-time.\"\n     [sym args & body]\n     (if-not &env\n       `(defn ~sym ~args ~@body)\n       `(defn ~sym ~args\n          (uixr/compile-defui ~sym ~body)))))\n\n(defn as-element [x]\n  \"Compiles Hiccup into React elements at run-time.\"\n  #?(:cljs (compiler/as-element x)\n     :clj x))\n\n(defn as-react\n  \"Interop with React components. Takes UIx component function and returns same component wrapped into interop layer.\"\n  [f]\n  #?(:cljs (compiler/as-react f)\n     :clj f))\n\n(defn add-transform-fn [f]\n  \"Injects attributes transforming function for Hiccup elements pre-transformations\"\n  (compiler/add-transform-fn f))\n"]}