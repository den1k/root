{"version":3,"sources":["root/impl/util.cljc"],"mappings":"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","names":["root.impl.util/spec-pred","fail-exp","spec-fn","spec","x","ret","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","expound-str","expound.alpha.expound_str.cljs$core$IFn$_invoke$arity$2","js/console.error","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain-data","root.impl.util/conform!","cljs.spec.alpha/conform","root.impl.util/valid!","cljs.spec.alpha/valid?","root.impl.util/ensure-vec","cljs.core/vector?","cljs.core/sequential?","cljs.core/vec","var_args","G__102485","root.impl.util/project","js/Error","f","coll","root.impl.util.project.cljs$core$IFn$_invoke$arity$3","to","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","root.impl.util/make-id-gen","start","current","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","root.impl.util/seek","pred","p1__102486#","cljs.core/some","root.impl.util/pretty-str","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__102487","cljs.core/*print-newline*","*print-fn*-orig-val__102488","cljs.core/*print-fn*","*print-newline*-temp-val__102489","*print-fn*-temp-val__102490","x__4721__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","root.impl.util/deep-merge","p__102493","vec__102494","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq102492","self__4777__auto__","cljs.core/seq","xs","cljs.core/set?","cljs.core/empty","cljs.core/cat","cljs.core/reverse","cljs.core/map?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/merge-with"],"sourcesContent":["(ns root.impl.util\n  (:require [expound.alpha :as exp]\n            [clojure.spec.alpha :as s]\n            [clojure.pprint :refer [pprint]]))\n\n(defn- spec-pred [fail-exp spec-fn spec x]\n  (let [ret (spec-fn spec x)]\n    (if (= fail-exp ret)\n      (let [expound-str (exp/expound-str spec x)]\n        (#?(:clj  println\n            :cljs js/console.error) expound-str)\n        (throw (ex-info \"Value doesn't match spec\"\n                        {:value   x\n                         :spec    spec\n                         :explain (s/explain-data spec x)})))\n      ret)))\n\n(defn conform! [spec x]\n  (spec-pred ::s/invalid s/conform spec x))\n\n(defn valid! [spec x]\n  (when (spec-pred false s/valid? spec x)\n    x))\n\n(defn ensure-vec [x]\n  (cond\n    (vector? x) x\n    (nil? x) []\n    (sequential? x) (vec x)\n    :else [x]))\n\n(defn project\n  ([f coll] (project {} f coll))\n  ([to f coll] (into to (map f) coll)))\n\n(defn make-id-gen [start]\n  (let [current (atom start)]\n    (fn [] (swap! current inc))))\n\n(defn seek [pred coll]\n  (some #(when (pred %) %) coll))\n\n(defn pretty-str [x]\n  (with-out-str (pprint x)))\n\n(defn deep-merge\n  \"Merges data-structures recursively. For sequential colls, creates a union\n  using the same type as the first data-structure\"\n  [& [x :as xs]]\n  (cond\n    (or (sequential? x) (set? x)) (into (empty x) cat (reverse xs))\n    (map? x) (apply merge-with deep-merge xs)))\n\n"]}