{"version":3,"sources":["examples/nested/views.cljs"],"mappings":"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","names":["examples.nested.views/elide-env","env","ast","opts","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","examples.nested.views/ex2-src","examples.nested.views/st","cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0","examples.nested.views/ana-str","code-str","cb","cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5","cljs.analyzer/infer-type","p__123169","map__123170","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","error","value","res","examples.nested.views/db","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__123172","map__123173","cljs.core/reset!","xframe.core.alpha/-reg-sub","f__40430__auto__","f*__40431__auto__","xframe.core.alpha/memoize-last-by","cljs.core/first","cljs.core/second","G__123175","xframe.core.adapton.make_athunk.cljs$core$IFn$_invoke$arity$variadic","js/goog.DEBUG","key__40432__auto__","args__40433__auto__","cljs.core/deref","path","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","xframe.core.alpha._LT__.cljs$core$IFn$_invoke$arity$1","examples.nested.views/lookup","x","cljs.core/vector?","cljs.core/map?","examples.nested.views/root","root.impl.core/ui-root","cljs.spec.alpha/and-spec-impl","p__123176","map__123177","examples.nested.views/ana-ent->css-classes","ent","op","tag","form","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__123179","map__123180","examples.nested.views/ent->handlers","children-ui","e","text","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__123182","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p__123183","map__123184","examples.nested.views/ana-ent->css-styles","G__123186","cljs.core/Keyword","cljs.core/count","examples.nested.views/ent->styles","p__123187","p__123188","map__123189","map__123190","cljs.core.get.cljs$core$IFn$_invoke$arity$3","examples.nested.views/editable-view","omit-styles?","form-print-fn","cljs.core/pr-str","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","root.impl.util/pretty-str","G__123193","G__123194","G__123195","p__123196","map__123197","fn-ui","args-ui","fn","vec__123199","seq__123200","cljs.core/seq","first__123201","cljs.core/next","arg0-ui","next-args-ui","args-ui'","fn-sym","fn-defn?","cljs.core/contains?","temp__5737__auto__","more-args-ui","G__123202","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","cljs.core/vec","cljs.core.into.cljs$core$IFn$_invoke$arity$2","root.impl.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic","G__123203","G__123204","G__123205","G__123206","G__123207","G__123208","G__123209","G__123210","G__123211","G__123212","G__123213","G__123214","p__123215","map__123216","test-ui","then-ui","else-ui","G__123218","G__123219","G__123220","p__123221","map__123222","keys-ui","vals-ui","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__123224","vec__123225","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","G__123228","G__123229","G__123230","p__123231","map__123232","statements-ui","ret-ui","first-do-form?","cljs.core/empty?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","G__123234","G__123235","G__123236","p__123237","map__123238","items-ui","vec__123240","seq__123241","first__123242","fui","items-ui'","js/examples","js/examples.nested","js/examples.nested.views","js/examples.nested.views.str-state","examples.nested.views/str-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","examples.nested.views/debounce-set-ana-str","G__123243","G__123244","goog.functions/debounce","s","p__123245","map__123246","examples.nested.views/paste-code-box","examples.nested.views/example-root","examples.nested.views/render-fn","dom-node","reagent.dom.render.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns examples.nested.views\n  (:require [xframe.core.alpha :as xf]\n            [den1k.shortcuts :refer [shortcuts global-shortcuts]]\n            [root.impl.core :as rc]\n            [clojure.spec.alpha :as s]\n            [cljs.js :as cljs]\n            [cljs.analyzer :as ana]\n            [goog.functions :as gfns]\n            [root.impl.util :as u]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [root.impl.resolver :as rr]))\n\n(defn elide-env [env ast opts]\n  (dissoc ast :env))\n\n(def ex2-src\n  \"(comment\n  \\\"apologies for my poor styling skills\\\")\n\n  (range 10)\n\n  (into\n     [:<>]\n     (map (fn [s] [:span.h3 s]))\n     [\\\"a\\\" \\\"b\\\" \\\"c\\\"])\")\n\n(def st (cljs/empty-state))\n\n(defn ana-str [code-str cb]\n  (cljs/analyze-str\n   st (str \"(do\" code-str \")\") nil\n   {:passes [ana/infer-type elide-env]}\n   (fn [{:keys [error value] :as res}]\n     (cb res))))\n\n(def db (r/atom {}))\n\n(ana-str ex2-src\n         (fn [{:keys [value error]}]\n           (reset! db value)))\n\n(xf/reg-sub :get-in\n  (fn [path]\n    (get-in (xf/<- [::xf/db]) path)))\n\n(defn lookup [x]\n  (cond\n    (vector? x) (get-in @db x)\n    (map? x) x))\n\n(def root\n  (rc/ui-root\n   {:dispatch-fn             :op\n    :lookup                  lookup\n    :content-keys            [:fn :args :items :vals :keys :statements :ret :test :then :else]\n    :content-spec            (s/and map? (fn [x] (:op x)))\n    :contents-hiccup-wrapper []}))\n\n(defn ana-ent->css-classes [{:as ent :keys [op tag form]}]\n  (cond\n    (= tag 'cljs.core/Keyword) [:green]\n    (or (= form 'fn)\n        (= form 'defn)) [:orange :b]\n    (= tag 'string) [:light-red]\n    (= tag 'number) [:blue]\n    (= op :var) [:b]\n    :else []))\n\n(defn ent->handlers [{:as ent :keys [form path tag op children-ui]}]\n  {:on-input\n   (fn [e]\n     (let [text (-> e .-target .-textContent)]\n       (swap! db\n              assoc-in\n              (conj path :form)\n              (cond\n                (= op :var) (symbol text)\n                :else (some-> text cljs.reader/read-string))))\n     (.stopPropagation e)\n     (.preventDefault e))\n   :content-editable\n   true\n   :suppressContentEditableWarning\n   true})\n\n(defn ana-ent->css-styles [{:as ent :keys [op path]}]\n  (case op\n    (:vector :invoke) {:padding-right 2\n                       :background    (str \"hsl(\" (int (/ 360 (count path))) \", 100%, 95%)\")}\n    nil))\n\n(defn ent->styles [ent]\n  {:class (ana-ent->css-classes ent)\n   :style (ana-ent->css-styles ent)})\n\n(defn editable-view\n  [{:as ent :keys [form path tag op]}\n   {:keys [omit-styles? form-print-fn]\n    :or   {form-print-fn pr-str}}]\n  [:span {:content-editable false}\n   [:span.outline-0\n    (merge (ent->styles ent)\n           (ent->handlers ent))\n    (u/pretty-str form)]])\n\n(root :view :invoke\n  (fn [{:as ent :keys [fn-ui args-ui path fn]}]\n    (let [[arg0-ui & next-args-ui :as args-ui'] args-ui\n          fn-sym   (:form fn)\n          fn-defn? (contains? #{'defn 'fn} fn-sym)]\n      [:div.flex.flex-wrap.br1\n       (ent->styles ent)\n       \"(\"\n       fn-ui\n       (when fn-defn? [:span.pl2 arg0-ui])\n       (if-let [more-args-ui (some-> (interpose [:span.pl2] (if fn-defn?\n                                                              next-args-ui\n                                                              args-ui'))\n                                     not-empty\n                                     vec\n                                     (conj [:span.self-end \")\"]))]\n         (into [:div.flex.flex-wrap.ml2\n                (u/deep-merge {:class [(when fn-defn? :w-100)]}\n                              (ent->styles ent))]\n               more-args-ui)\n         [:span.self-end \")\"])])))\n\n\n(root :view :var editable-view)\n(root :view :js-var editable-view)\n(root :view :const editable-view)\n(root :view :if\n  (fn [{:as ent :keys [test-ui then-ui else-ui]}]\n    [:div.flex.flex-column.br1\n     ;(ent->styles ent)\n     [:div \"(if \" test-ui]\n     then-ui\n     else-ui]\n    ))\n\n(root :view :map\n  (fn [{:as ent :keys [path keys-ui vals-ui]}]\n    [:div.flex\n     \"{\"\n     [:span.flex.flex-column\n      (map (fn [[k v]] [:span.flex.flex-wrap k [:span.pl2] v])\n           (partition 2 (interleave keys-ui vals-ui)))]\n     [:span.self-end \"}\"]]))\n\n(root :view :do\n  (fn [{:as ent :keys [fn-ui args-ui path statements-ui ret-ui]}]\n    (let [first-do-form? (empty? path)]\n      [:div.flex.br1\n       (when-not first-do-form? \"(do\")\n       (into [:div.flex.flex-column]\n             (map (fn [x]\n                    [:span.pl2.meow x]))\n             (conj statements-ui\n                   [:div.ph1 ret-ui]))\n       (when-not first-do-form? [:span.self-end \")\"])])))\n\n(root :view :vector\n  (fn [{:as ent :keys [items-ui]}]\n    (let [[fui & items-ui'] items-ui]\n      [:span.flex.items-end {:content-editable false}\n       [:div.outline-0.flex.flex-wrap.br1 ;.mv1\n        (ent->handlers ent)\n        \"[\" (into [:<> fui] (map (fn [x] [:span.pl2 x]) items-ui'))\n        [:span.self-end \"]\"]]])))\n\n(defonce str-state (atom ex2-src))\n\n(def debounce-set-ana-str\n  (gfns/debounce\n   (fn [s]\n     (ana-str s\n              (fn [{:keys [value error]}]\n                (when value\n                  (reset! db value)))))\n   200))\n\n(defn paste-code-box []\n  [:textarea.vh-100.w-40.outline-0.bn.pa3\n   {:default-value ex2-src\n    :on-change     (fn [e]\n                     (let [text (-> e .-target .-value)]\n                       (debounce-set-ana-str text)))}])\n\n(defn ^:export example-root []\n  [:div.flex\n   [paste-code-box]\n   [:div.code.pre.pa3.outline-0.w-60.bl.f6\n    {:style                             {:line-height 2}\n     :autoFocus                         true\n     :content-editable                  true\n     :suppress-content-editable-warning true}\n    [root :resolve {:path []}]]])\n\n(defn ^:export render-fn [dom-node]\n  (rdom/render [example-root] dom-node))\n"]}