{"version":3,"sources":["xframe/core/adapton.cljs"],"mappings":";;AAGA,AAAeA,AAAc,AAAA,AAACC;AAE9B,AAAA;AAAA;;;AAAA,AAAae;;AAAb,AAAA,AACGZ,AAAQa,AAAKC;AADhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACWD,AAAAA;AADX,AACWA,AAAAA,AAAKC;;AADhB,AAAAhB,AAAA,AAAA,AAAA,AAAA,AACWe,AAAAA;AADXd,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACWc,AAAAA,AAAKC,AAAAA;;AADhB,AAAAZ,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACWW,AAAAA,AAAKC,AAAAA;;AADhB,AAAA,AAAAX,AAAA,AACWU;;;;;;AADX,AAAA,AAEGT,AAAQS,AAAKC;AAFhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEWD,AAAAA;AAFX,AAEWA,AAAAA,AAAKC;;AAFhB,AAAAhB,AAAA,AAAA,AAAA,AAAA,AAEWe,AAAAA;AAFXd,AAAA,AAAAK,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWc,AAAAA,AAAKC,AAAAA;;AAFhB,AAAAZ,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWW,AAAAA,AAAKC,AAAAA;;AAFhB,AAAA,AAAAX,AAAA,AAEWU;;;;;;AAFX,AAAA,AAGGR,AAASQ;AAHZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGYA,AAAAA;AAHZ,AAGYA,AAAAA;;AAHZ,AAAAf,AAAA,AAAA,AAAA,AAAA,AAGYe,AAAAA;AAHZd,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGYc,AAAAA;;AAHZ,AAAAX,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGYW,AAAAA;;AAHZ,AAAA,AAAAV,AAAA,AAGYU;;;;;;AAHZ,AAAA,AAIGP,AAAQO;AAJX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIWA,AAAAA;AAJX,AAIWA,AAAAA;;AAJX,AAAAf,AAAA,AAAA,AAAA,AAAA,AAIWe,AAAAA;AAJXd,AAAA,AAAAO,AAAA,AAAAL,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIWc,AAAAA;;AAJX,AAAAX,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIWW,AAAAA;;AAJX,AAAA,AAAAV,AAAA,AAIWU;;;;;;AAJX,AAAA,AAKGN,AAAYM,AAAKE;AALpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKeF,AAAAA;AALf,AAKeA,AAAAA,AAAKE;;AALpB,AAAAjB,AAAA,AAAA,AAAA,AAAA,AAKee,AAAAA;AALfd,AAAA,AAAAQ,AAAA,AAAAN,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKec,AAAAA,AAAKE,AAAAA;;AALpB,AAAAb,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKeW,AAAAA,AAAKE,AAAAA;;AALpB,AAAA,AAAAZ,AAAA,AAKeU;;;;;;AALf,AAAA,AAMGL,AAAaK,AAAKG;AANrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMgBH,AAAAA;AANhB,AAMgBA,AAAAA,AAAKG;;AANrB,AAAAlB,AAAA,AAAA,AAAA,AAAA,AAMgBe,AAAAA;AANhBd,AAAA,AAAAS,AAAA,AAAAP,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMgBc,AAAAA,AAAKG,AAAAA;;AANrB,AAAAd,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMgBW,AAAAA,AAAKG,AAAAA;;AANrB,AAAA,AAAAb,AAAA,AAMgBU;;;;;;AANhB,AAAA,AAOGJ,AAASI;AAPZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOYA,AAAAA;AAPZ,AAOYA,AAAAA;;AAPZ,AAAAf,AAAA,AAAA,AAAA,AAAA,AAOYe,AAAAA;AAPZd,AAAA,AAAAU,AAAA,AAAAR,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOYc,AAAAA;;AAPZ,AAAAX,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOYW,AAAAA;;AAPZ,AAAA,AAAAV,AAAA,AAOYU;;;;;;AAPZ,AAAA,AAQGH,AAAUG,AAAKI;AARlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQaJ,AAAAA;AARb,AAQaA,AAAAA,AAAKI;;AARlB,AAAAnB,AAAA,AAAA,AAAA,AAAA,AAQae,AAAAA;AARbd,AAAA,AAAAW,AAAA,AAAAT,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQac,AAAAA,AAAKI,AAAAA;;AARlB,AAAAf,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQaW,AAAAA,AAAKI,AAAAA;;AARlB,AAAA,AAAAd,AAAA,AAQaU;;;;;;AARb,AAAA,AASGF,AAAYE;AATf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASeA,AAAAA;AATf,AASeA,AAAAA;;AATf,AAAAf,AAAA,AAAA,AAAA,AAAA,AASee,AAAAA;AATfd,AAAA,AAAAY,AAAA,AAAAV,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASec,AAAAA;;AATf,AAAAX,AAAA,AAAAS,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASeW,AAAAA;;AATf,AAAA,AAAAV,AAAA,AASeU;;;;;;AATf,AAWA,AAAA;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAK,AAASK;;AAAT,AAAA,AAAA,AAAA,AAASA,AASIV,AAAKI;;AATlB,AAAA,AAAA,AASaJ;AATb,AAUI,AAAMe,AAAIX;;;AAVd,AAAA,AAAA,AAAA,AAASM,AAgBEV,AAAKC;;AAhBhB,AAAA,AAAA,AAgBWD;AAhBX,AAiBI,AAASc,AAAIb;;AACb,AAAS,AAAqBA,AAAOD;;;AAlBzC,AAAA,AAAA,AAAA,AAASU,AAOGV;;AAPZ,AAAA,AAAA,AAOYA;AAPZ,AAQIe;;;AARJ,AAAA,AAAA,AAAA,AAASL,AAmBeV;;;AAnBxB,AAAA,AAAA,AAmBwBA;AAnBxB,AAoBI,AAAagB;AACXH;;AACA,AACM,AAAOK,AAASJ,AAAK,AAAA;AAAAK;AAAA,AAAW,AAAAA,AAAQnB;;;;AAC5C,AAAA,AAAMgB;;AACN,AAAA,AACE,AAAMH,AAAO,AAACD,AAAAA,AAAAA;AADhB,AAAAQ,AAEkBC;AAFlB,AAGI,AAAMR,AAAOQ;;AACb,AAAQC,AAAW,AAAA,AAAA,AAAqB,AAAA,AAACC,AAAM,AAAA,AAAON,AAAQ,AAAA,AAAOA;;AACzE,AAAA;;;;;;;;AA9BR,AAAA,AAAA,AAAA,AAASP,AAWMV;;AAXf,AAAA,AAAA,AAWeA;AAXf,AAYIa;;;AAZJ,AAAA,AAAA,AAAA,AAASH,AAaEV,AAAKC;;AAbhB,AAAA,AAAA,AAaWD;AAbX,AAcI,AAAMc,AAAIb;;AACV,AAAM,AAAOA,AAAOD;;;AAfxB,AAAA,AAAA,AAAA,AAASU,AAqCOV,AAAKG;;AArCrB,AAAA,AAAA,AAqCgBH;AArChB,AAsCI,AAAMa,AAAOV;;;AAtCjB,AAAA,AAAA,AAAA,AAASO,AA+BEV;;AA/BX,AAAA,AAAA,AA+BWA;AA/BX,AAgCI,AAAegB;AAAf,AACE,AAAA,AAAMA;;AACF,AAAOE,AAASH,AAAK,AAAA,AAAAS;AAAA,AAAW,AAAAA;;;AAFtC;;;;AAhCJ,AAAA,AAAA,AAAA,AAASd,AAmCMV,AAAKE;;AAnCpB,AAAA,AAAA,AAmCeF;AAnCf,AAoCI,AAAMY,AAAMV;;;AApChB,AAAA,AAAA,AAAA,AAASQ,AAyCEV;;AAzCX,AAAA,AAAA,AAyCWA;AAzCX,AA0CI,AAAMyB,AAAc,AAAA,AAAAC,AAAC1C,AAAWD;AAC1B4C,AAAE,AAACC,AAAQ7C,AAAciB;AACzBa,AAAO,AAAqBb;AAC5B2B,AAAE,AAAA,AAAAD,AAACE,AAAQ7C,AAAe0C;AAHhC,AAIE,AAAM,AAAAC,AAAU3C;AAAhB,AACE,AAAQ,AAAA2C,AAAa3C,AAAciB;;AADrC;;AAEAa;;;AAhDN,AAAA,AAAA,AAAA,AAASH,AAmDGV,AAAK6B;;AAnDjB,AAAA,AAAA,AAmDY7B;AAnDZ,AAoDI,AAAaA,AAAK6B;;AAClB,AAAQ7B;;;AArDZ,AAAA,AAAA,AAAA,AAASU,AAwDEV,AAAK8B;;AAxDhB,AAAA,AAAA,AAwDW9B;AAxDX,AAyDI,AAASA,AAAK,AAAA+B,AAAG,AAAQ/B;AAAX,AAAA,AAAA+B,AAAAA,AAACD,AAAAA,AAAAA;;;;AAzDnB,AAAA,AAAA,AAAA,AAASpB,AA0DEV,AAAK8B,AAAEE;;AA1DlB,AAAA,AAAA,AA0DWhC;AA1DX,AA2DI,AAASA,AAAK,AAAAiC,AAAG,AAAQjC;AAAXkC,AAAiBF;AAAjB,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACJ,AAAAA,AAAAA;;;;AA3DnB,AAAA,AAAA,AAAA,AAASpB,AA4DEV,AAAK8B,AAAEE,AAAEG;;AA5DpB,AAAA,AAAA,AA4DWnC;AA5DX,AA6DI,AAASA,AAAK,AAAAoC,AAAG,AAAQpC;AAAXqC,AAAiBL;AAAjBM,AAAmBH;AAAnB,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACR,AAAAA,AAAAA;;;;AA7DnB,AAAA,AAAA,AAAA,AAASpB,AA8DEV,AAAK8B,AAAEE,AAAEG,AAAEI;;AA9DtB,AAAA,AAAA,AA8DWvC;AA9DX,AA+DI,AAASA,AAAK,AAACwC,AAAMV,AAAE,AAAQ9B,AAAMgC,AAAEG,AAAEI;;;AA/D7C,AAAA,AAAA,AAAA,AAAS7B,AAkECV;;AAlEV,AAAA,AAAA,AAkEUA;AAlEV,AAmEIiB;;;AAnEJ,AAAA,AAAA,AAASP;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAmBC,AACAC,AACAC,AACAC,AACAC,AACVC;AALlB,AAAA,AAAAP,AAA4BE,AACAC,AACAC,AACAC,AACAC,AACVC;;;AALTP,AAqET,AAAA,AAAM+B,AAAUZ;AAAhB,AACE,AAAWnB,AAAQmB;;AAErB,AAAA,AAAA,AAAAa,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAapC;AAAnB,AAAA,AAAAsC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA4BO;AAA5B,AACE,AAAA/C,AAAA,AAAA,AAAUE,AAAU,AAAA8C,AAAU,AAAAA,AAAgBD;;;AADhD,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAGA,AAAA,AAAMO,AAAM9B;AAAZ,AACE,AAAM+B,AAAE,AAAAlD,AAAA,AAAA,AAAA,AAAcmB,AAAE,AAAA6B,AAAU,AAAAA;AAAlC,AACE,AAAA,AAAYE;AAAZ,AAAe,AAAYA;;;AAC3BA;;AAEJ,AAAA,AAAMC,AAAUhC;AAAhB,AACE,AAACiC,AAAO,AAACA,AAAOjC","names":["xframe.core.adapton/curr-adapting","cljs.core/volatile!","x__4487__auto__","m__4488__auto__","xframe.core.adapton/+edge!","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","xframe.core.adapton/-edge!","xframe.core.adapton/compute","xframe.core.adapton/dirty!","xframe.core.adapton/set-thunk!","xframe.core.adapton/set-result!","xframe.core.adapton/get-sup","xframe.core.adapton/set-sup!","xframe.core.adapton/get-result","xframe.core.adapton/IAdapton","this","a-sub","new-thunk","new-result","new-sup","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","xframe.core.adapton/Adapton","xframe.core.adapton/->Adapton","thunk","result","sub","sup","clean?","ameta","js/Array","p1__100950#","e100959","e","js/console","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__100951#","prev-adapting","cljs.core/deref","_","cljs.core/vreset!","v","f","G__100970","x","G__100971","G__100972","y","G__100973","G__100974","G__100975","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","xframe.core.adapton/adapton?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","xframe.core.adapton/make-athunk","p__100982","vec__100983","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq100979","G__100980","cljs.core/first","cljs.core/next","self__4776__auto__","meta","js/Set","xframe.core.adapton/aref","a","xframe.core.adapton/avar-get","cljs.core/-deref"],"sourcesContent":["(ns xframe.core.adapton\n  (:require-macros [xframe.core.adapton :refer [adapt]]))\n\n(def ^:private curr-adapting (volatile! false))\n\n(defprotocol IAdapton\n  (+edge! [this a-sub])\n  (-edge! [this a-sub])\n  (compute [this])\n  (dirty! [this])\n  (set-thunk! [this new-thunk])\n  (set-result! [this new-result])\n  (get-sup [this])\n  (set-sup! [this new-sup])\n  (get-result [this]))\n\n(deftype Adapton [^:mutable thunk\n                  ^:mutable result\n                  ^:mutable sub\n                  ^:mutable sup\n                  ^:mutable clean?\n                  ameta]\n  IAdapton\n  (get-sup [this]\n    sup)\n  (set-sup! [this new-sup]\n    (set! sup new-sup))\n  (get-result [this]\n    result)\n  (+edge! [this a-sub]\n    (.add sub a-sub)\n    (.add (.-sup a-sub) this))\n  (-edge! [this a-sub]\n    (.delete sub a-sub)\n    (.delete (get-sup ^not-native a-sub) this))\n  (compute [^not-native this]\n    (if ^boolean clean?\n      result\n      (do\n        (-> (.from js/Array sub) (.forEach #(-edge! this %)))\n        (set! clean? true)\n        (try\n          (set! result (thunk))\n          (catch :default e\n            (set! result e)\n            (.error js/console (str \"Subscription \" (into [(:name ameta)] (:args ameta)) \" failed to compute\"))))\n        (recur))))\n  (dirty! [this]\n    (when ^boolean clean?\n      (set! clean? false)\n      (-> (.from js/Array sup) (.forEach #(dirty! ^not-native %)))))\n  (set-thunk! [this new-thunk]\n    (set! thunk new-thunk))\n  (set-result! [this new-result]\n    (set! result new-result))\n\n  IDeref\n  (-deref [this]\n    (let [prev-adapting (volatile! @curr-adapting)\n          _ (vreset! curr-adapting this)\n          result (compute ^not-native this)\n          _ (vreset! curr-adapting @prev-adapting)]\n      (when ^boolean @curr-adapting\n        (+edge! ^not-native @curr-adapting this))\n      result))\n\n  IReset\n  (-reset! [this v]\n    (set-result! this v)\n    (dirty! this))\n\n  ISwap\n  (-swap! [this f]\n    (-reset! this (f (-deref this))))\n  (-swap! [this f x]\n    (-reset! this (f (-deref this) x)))\n  (-swap! [this f x y]\n    (-reset! this (f (-deref this) x y)))\n  (-swap! [this f x y args]\n    (-reset! this (apply f (-deref this) x y args)))\n\n  IMeta\n  (-meta [this]\n    ameta))\n\n(defn adapton? [v]\n  (instance? Adapton v))\n\n(defn make-athunk [thunk & [meta]]\n  (Adapton. thunk nil (js/Set.) (js/Set.) false meta))\n\n(defn aref [v]\n  (let [a (Adapton. nil v (js/Set.) (js/Set.) true nil)]\n    (set-thunk! a #(get-result a))\n    a))\n\n(defn avar-get [v]\n  (-deref (-deref v)))\n"]}