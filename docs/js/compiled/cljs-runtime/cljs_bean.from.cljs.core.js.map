{"version":3,"sources":["cljs_bean/from/cljs/core.cljs"],"mappings":"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","names":["var_args","G__100598","cljs-bean.from.cljs.core/-indexOf","js/Error","coll","x","cljs_bean.from.cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3","start","len","cljs.core/count","idx","x__4273__auto__","y__4274__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__100606","cljs-bean.from.cljs.core/-lastIndexOf","cljs_bean.from.cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3","x__4276__auto__","y__4277__auto__","G__100609","cljs-bean.from.cljs.core/compare-indexed","xs","ys","xl","yl","cljs_bean.from.cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4","n","d","cljs.core/compare","cljs-bean.from.cljs.core/equiv-sequential","y","cljs.core/boolean","cljs.core/sequential?","cljs.core/counted?","cljs.core/seq","cljs.core/first","cljs.core/next","G__100623","cljs-bean.from.cljs.core/ci-reduce","cicoll","f","cnt","val","nval","G__100624","G__100625","cljs.core/deref","cljs.core/reduced?","G__100627","G__100628","G__100632","G__100633","cljs-bean.from.cljs.core/TransientArrayMap-conj!","tcoll","o","editable?","cljs.core/map-entry?","cljs.core/key","cljs.core/val","cljs.core/vector?","es","temp__5737__auto__","e","cljs.core/-assoc!","cljs-bean.from.cljs.core/PersistentArrayMap-conj","entry","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","ret","cljs.core/-assoc","cljs-bean.from.cljs.core/TransientVector-assoc!","key","type-name","cljs-bean.from.cljs.core/PersistentVector-equiv","other","type","me-iter","you-iter","cljs.core/-iterator","cljs-bean.from.cljs.core/PersistentVector-lookup","k","not-found","cljs-bean.from.cljs.core/PersistentVector-assoc","v","cljs-bean.from.cljs.core/PersistentVector-contains-key?","cljs.core/integer?"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc cljs-bean.from.cljs.core)\n\n;; Copied and made public, adding ^not-native hints\n(defn -indexOf\n  ([^not-native coll x]\n   (-indexOf coll x 0))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn -lastIndexOf\n  ([^not-native coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (zero? len)\n       -1\n       (loop [idx (cond\n                    (pos? start) (min (dec len) start)\n                    (neg? start) (+ len start)\n                    :else start)]\n         (if (>= idx 0)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (dec idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn compare-indexed\n  \"Compare indexed collection.\"\n  ([^not-native xs ys]\n   (let [xl (count xs)\n         yl (count ys)]\n     (cond\n       (< xl yl) -1\n       (> xl yl) 1\n       (== xl 0) 0\n       :else (compare-indexed xs ys xl 0))))\n  ([^not-native xs ys len n]\n   (let [d (compare (nth xs n) (nth ys n))]\n     (if (and (zero? d) (< (+ n 1) len))\n       (recur xs ys len (inc n))\n       d))))\n\n;; Copied and made public, adding ^not-native hint\n(defn equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [^not-native x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n            (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n                (nil? ys) false\n                (= (first xs) (first ys)) (recur (next xs) (next ys))\n                :else false))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n   (let [cnt (-count cicoll)]\n     (if (zero? cnt)\n       (f)\n       (loop [val (-nth cicoll 0), n 1]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n  ([^not-native cicoll f val]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n 0]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val))))\n  ([^not-native cicoll f val idx]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n idx]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val)))))\n\n;; Copied from TransientArrayMap and modified with editable? param, adding ^not-native hint\n(defn TransientArrayMap-conj! [^not-native tcoll o editable?]\n  (if editable?\n    (cond\n      (map-entry? o)\n      (-assoc! tcoll (key o) (val o))\n\n      (vector? o)\n      (-assoc! tcoll (o 0) (o 1))\n\n      :else\n      (loop [es (seq o) tcoll tcoll]\n        (if-let [e (first es)]\n          (recur (next es)\n            (-assoc! tcoll (key e) (val e)))\n          tcoll)))\n    (throw (js/Error. \"conj! after persistent!\"))))\n\n;; Copied from PersistentArrayMap, adding ^not-native hint\n(defn PersistentArrayMap-conj [^not-native coll entry]\n  (if (vector? entry)\n    (-assoc coll (-nth entry 0) (-nth entry 1))\n    (loop [ret coll es (seq entry)]\n      (if (nil? es)\n        ret\n        (let [e (first es)]\n          (if (vector? e)\n            (recur (-assoc ret (-nth e 0) (-nth e 1))\n              (next es))\n            (throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n;; Copied from TransientVector and parameterized on type-name, adding ^not-native hint\n(defn TransientVector-assoc! [^not-native tcoll key val type-name]\n  (if (number? key)\n    (-assoc-n! tcoll key val)\n    (throw (js/Error. (str type-name \"'s key for assoc! must be a number.\")))))\n\n;; Copied from PersistentVector and parameterized on type and cnt, adding ^not-native hint\n(defn PersistentVector-equiv [^not-native coll other type cnt]\n  (if (instance? type other)\n    (if (== cnt (count other))\n      (let [me-iter  (-iterator coll)\n            you-iter (-iterator other)]\n        (loop []\n          (if ^boolean (.hasNext me-iter)\n            (let [x (.next me-iter)\n                  y (.next you-iter)]\n              (if (= x y)\n                (recur)\n                false))\n            true)))\n      false)\n    (equiv-sequential coll other)))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-lookup [^not-native coll k not-found]\n  (if (number? k)\n    (-nth coll k not-found)\n    not-found))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-assoc [^not-native coll k v]\n  (if (number? k)\n    (-assoc-n coll k v)\n    (throw (js/Error. \"Vector's key for assoc must be a number.\"))))\n\n;; Copied from PersistentVector an parameterized on cnt\n(defn PersistentVector-contains-key? [coll k cnt]\n  (if (integer? k)\n    (and (<= 0 k) (< k cnt))\n    false))\n"]}