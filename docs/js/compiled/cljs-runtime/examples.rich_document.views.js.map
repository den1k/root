{"version":3,"sources":["examples/rich_document/views.cljs"],"mappings":"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","names":["examples.rich-document.views/entity-actions","examples.rich-document.views/ent->ref","ent","examples.rich-document.views/projected-data","root.impl.util.project.cljs$core$IFn$_invoke$arity$2","examples.rich-document.mock-data/data","cljs.core/reset!","root.impl.core/state","examples.rich-document.views/lookup*","x","cljs.core/coll?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","xframe.core.alpha._LT__.cljs$core$IFn$_invoke$arity$1","xframe.core.alpha/-reg-sub","f__40430__auto__","f*__40431__auto__","xframe.core.alpha/memoize-last-by","cljs.core/first","cljs.core/second","G__123062","xframe.core.adapton.make_athunk.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/goog.DEBUG","key__40432__auto__","args__40433__auto__","cljs.core/deref","k","examples.rich-document.views/lookup","cljs.core/not","js/window","examples.rich-document.views/lookup-sub","id","s123064","k__41383__auto__","get-state123063","xframe.core.alpha._LT__.cljs$core$IFn$_invoke$arity$2","and__4174__auto__","js/__REACT_DEVTOOLS_GLOBAL_HOOK__","xframe.core.alpha/subscribe-ref","uix.core.alpha.callback.cljs$core$IFn$_invoke$arity$2","examples.rich-document.views/root","root.impl.core/ui-root","f","or__4185__auto__","root.impl.core/transact","cljs.core/integer?","root.impl.core/add-id","den1k.shortcuts.global_shortcuts.cljs$core$IFn$_invoke$arity$variadic","G__123066","G__123067","G__123068","G__123069","G__123070","G__123071","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","examples.rich-document.views/block","p__123075","map__123076","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__123077","seq123073","G__123074","cljs.core/next","self__4776__auto__","show-block-thumb?","show-block-menu?","path","remove","children","cljs.core.into.cljs$core$IFn$_invoke$arity$2","e","G__123080","G__123081","G__123082","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__123083","G__123084","G__123085","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__123086","G__123087","G__123088","li-tag","p1__123072#","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/name","fexpr__123089","opt-kw","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/rand-int","G__123090","G__123091","G__123092","cljs.core/Keyword","js/Error","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc-in","cljs.core.map.cljs$core$IFn$_invoke$arity$1","G__123093","G__123094","G__123095","p__123096","map__123097","markup","handlers","p__123100","map__123101","examples.rich-document.views/input","opts","active?","p1__123099#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","node","examples.util.dom.set_cursor.cljs$core$IFn$_invoke$arity$3","v","G__123103","G__123104","G__123105","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__123106","G__123107","G__123108","G__123109","G__123110","G__123111","p__123112","map__123113","content-ui","open?","map__123115","items","button","G__123117","G__123118","G__123119","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__123120","G__123121","G__123122","p__123123","map__123124","routes","p__123126","vec__123127","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__123130","G__123131","G__123132","G__123134","G__123135","G__123136","p__123137","map__123138","map__123139","checked?","toggle-checked","cljs.core/boolean","p1__123133#","den1k.shortcuts.shortcuts.cljs$core$IFn$_invoke$arity$1","cljs.core/empty?","vec__123142","tthis","tnext","examples.util.string/split-at","examples.util.dom/get-cursor","tnext?","cljs.core/not-empty","G__123145","G__123146","G__123147","G__123149","fexpr__123148","examples.rich-document.views/example-root","examples.util.dom/example","examples.util.dom/pretty-code-block","examples.rich-document.views/render-fn","dom-node","uix.dom.alpha/render"],"sourcesContent":["(ns examples.rich-document.views\n  (:require [den1k.shortcuts :refer [shortcuts global-shortcuts]]\n            [examples.util.dom :as ud]\n            [examples.util.string :as ustr]\n            [uix.dom.alpha :as uix.dom]\n            [root.impl.core :as rc]\n            [root.impl.util :as u]\n            [xframe.core.alpha :as xf]\n            [examples.rich-document.mock-data :as mock-data]\n            [uix.core.alpha :as uix]))\n\n(def entity-actions\n  {:global\n   {:undo [[:undo]]\n    :redo [[:redo]]}\n   :toggle-list\n   {:remove [[:remove [:<- :content]]]}\n   :todo-item\n   {:add            [[:add\n                      [:<- :content :items]\n                      {:type :todo-item :active? true :markup [\"New Todo\"]}]]\n    :add-after      [[:add-after\n                      {:type :todo-item :active? true :markup [\"New Todo\"]}]]\n    :remove         [[:remove [:<- :content :items]]]\n    :toggle-checked [[:toggle :checked?]]}})\n\n(defn ent->ref [ent]\n  (:id ent))\n\n(def projected-data\n  (u/project (fn [ent] [(ent->ref ent) ent]) mock-data/data))\n\n(reset! rc/state projected-data)\n\n(defn lookup* [x]\n  (if (coll? x)\n    x\n    (get (xf/<- [::xf/db]) x)))\n\n(xf/reg-sub :get\n  (fn [k] (lookup* k)))\n\n(def lookup lookup*)\n\n(if-not (.-__REACT_DEVTOOLS_GLOBAL_HOOK__ js/window)\n  (set! (.-__REACT_DEVTOOLS_GLOBAL_HOOK__ js/window) nil))\n\n(defn lookup-sub [id]\n  (xf/<sub [:get id]))\n\n(def root\n  (rc/ui-root\n   {:->ref          ent->ref\n    :invoke-fn      (fn invoke [f x]\n                      ;(js/console.log :ent x)\n                      ^{:key (ent->ref x)}\n                      [f x])\n    :lookup         lookup\n    :lookup-sub     lookup-sub\n    :dispatch-fn    (fn [x] (or (:view x) (:type x)))\n    :transact       rc/transact\n    :content-keys   [:content]\n    :content-spec   integer?\n    :entity-actions entity-actions\n    :add-id         rc/add-id}))\n\n(global-shortcuts {\"cmd+z\"       #(root :transact [[:undo]] {:history? false})\n                   \"cmd+shift+z\" #(root :transact [[:redo]] {:history? false})})\n\n\n(defn block\n  [{:as              ent\n    :keys            [id show-block-thumb? show-block-menu? path]\n    {:keys [remove]} :actions}\n   & children]\n  (into [:div.flex.items-center\n         {:on-mouse-enter\n          (fn [e]\n            (root :transact\n              [[:set (assoc ent :show-block-thumb? true)]]\n              {:history? false}))\n          :on-mouse-leave\n          (fn [e]\n            (root :transact\n              [[:set (assoc ent :show-block-thumb? false\n                                :show-block-menu? false)]]\n              {:history? false}))}\n         [:div\n          {:class (when-not show-block-thumb? \"hide-child\")}\n          [:div.light-silver.pointer.f7.mr1.relative\n           [:span.b.pa1.f6.br1.hover-bg-light-gray.child\n            {:on-click #(root :transact\n                          [[:set (assoc ent :show-block-menu? true)]]\n                          {:history? false})}\n            \"::\"]\n           (when show-block-menu?\n             (let [li-tag :li.pv2.ph3.b--light-silver.bb.hover-bg-light-gray]\n               [:ul.list.pl0.ml0.center.mw6.bg-white.shadow-2.br2.dark-gray.absolute.z-1\n                {:style {:top \"-0.2rem\"}}\n\n                [li-tag\n                 {:on-click remove}\n                 \"remove\"]\n                [li-tag\n                 \"Turn into\"\n                 (into\n                  [:select\n                   {:value     (name ((:dispatch-fn root) ent))\n                    :on-change #(let [opt-kw (-> % .-target .-value keyword)\n                                      ent    (assoc ent :type opt-kw\n                                                        :show-block-menu? false)\n                                      id     (+ 1000 (rand-int 10e4))]\n                                  (root\n                                    :transact\n                                    (case opt-kw\n                                      :todo-item\n                                      [[:set (dissoc ent :view :content)]]\n                                      :toggle-list\n                                      [[:add\n                                        [:<- :content :items]\n                                        {:id id :type :todo-item :active? true :markup [\"empty\"]}]\n                                       [:set (-> ent\n                                                 (assoc :open? true)\n                                                 (assoc-in [:content :items] [id]))]])))}]\n                  (map (fn [x] [:option {:value x} x]))\n                  [\"todo-item\" \"toggle-list\"])]]))]]]\n        children))\n\n(root :view :button\n  (fn [{:as ent :keys [markup handlers]}]\n    [:button.f6.link.dim.br2.ba.ph2.pv1.dib.black\n     handlers (first markup)]))\n\n(defn input\n  [opts {:as ent :keys [markup active?]}]\n  [:div.outline-0.ph2\n   (merge\n    {:ref\n     (fn [node]\n       (when (and node active?)\n         (ud/set-cursor node 0 {:unless-active? true})))\n     :content-editable\n     true\n     :suppress-content-editable-warning\n     true\n     :on-blur\n     #(let [v (-> % .-target .-innerText)]\n        (root :transact\n          [[:set (assoc ent :active? false\n                            :markup [v])]]\n          {:history? (not= v (first markup))}))\n     :on-click\n     #(root :transact [[:set (assoc ent :active? true)]]\n        {:history? false})}\n    opts)\n   (first markup)])\n\n(root :view :toggle-list\n  (fn [{:as ent :keys [id markup content-ui open?]}]\n    (let [{:keys [items button]} content-ui]\n      [block ent\n       (cond-> [:div\n                [:div.flex.items-center.justify-between\n                 [:div.flex\n                  [:span.pointer.pl1.pv1\n                   {:style    (merge\n                               {:font-size   12\n                                :line-height 1\n                                :user-select :none}\n                               (when open?\n                                 {:transform        \"rotate(90deg)\"\n                                  :transform-origin :center}))\n                    :on-click #(root :transact [[:toggle :open? ent]])}\n                   \"\u25b6\"]\n                  [input {} ent]]\n                 button]]\n         open? (conj items))])))\n\n(root :view :nav\n  (fn [{:as ent :keys [content-ui routes]}]\n    [:div\n     [:nav.db.dt-l.w-100.border-box.pa3.ph5-l\n      (into\n       [:div.db.dtc-l.v-mid.w-100.w-75-l.tc.tr-l]\n       (map\n        (fn [[k v]]\n          [:a.link.dim.dark-gray.f6.f5-l.dib.mr3.mr4-l.fw5.pointer\n           {;; with history enabled this breaks due to a bug in spec that\n            ;; does not respect a nonconforming during unform\n            :on-click #(root :transact [[:set (assoc ent :content v)]] {:history? false})}\n           (name k)]))\n       routes)]\n     content-ui]))\n\n(root :view :todo-item\n  (fn\n    [{:as                             ent\n      :keys                           [path markup checked?]\n      {:keys [toggle-checked remove]} :actions}]\n    [block ent\n     [:input {:type      :checkbox\n              :checked   (boolean checked?)\n              :on-change toggle-checked}]\n     [input\n      (shortcuts\n       {\"backspace\" (fn [e]\n                      (let [v (-> e .-target .-innerText)]\n                        (if (empty? v)\n                          (remove)\n                          ; todo if index at first position concat with previous ent\n                          )))\n        \"enter\"\n                    #(let [v      (-> % .-target .-innerText)\n                           [tthis tnext] (ustr/split-at (ud/get-cursor) v)\n                           tnext? (boolean (not-empty tnext))]\n                       (root :transact\n                         [[:set (assoc ent :active? false :markup [tthis])]\n                          [:add-after path ((:add-id root) {:type :todo-item :active? true :markup [(or tnext \"\")]})]]\n                         {:history? (or tnext? (not= tthis (first markup)))})\n                       false)})\n      ent]]))\n\n(defn ^:export example-root []\n  [ud/example\n   {:title\n    \"A Poor Person's Notion Clone in 200 LoC\"\n    :source\n    \"https://github.com/den1k/root/blob/master/dev/examples/rich_document/views.cljs\"\n    :open-details?\n    true\n    :details\n    [:<>\n     [:h3 \"Baby Steps toward a Rich Document Editor\"]\n     [:b \"Current Feature Set:\"]\n     [:ul\n      [:li \"Routing (click \" [:i \"home\"] \" or \" [:i \"about\"] \")\"]\n      [:li \"Undo/Redo through shortcuts or rendered buttons\"]\n      [:li \"Context menus (hover over the todos or toggle-lists)\"]\n      [:li \"Change \" [:i.b \"block\"] \" type (through context menu)\"]\n      [:li \"Arbitrarily deep nesting of views (make toggle-lists inside toggle-lists)\"]]\n     [:hr]\n     [:details.pb1\n      {:open false}\n      [:summary.outline-0.pointer \"initial app-state\"]\n      [:div.pv1\n       [ud/pretty-code-block 120 projected-data]]]\n     [:div \"From the initial app-state root recurses through \" [:code.red \":content\"]\n      \" keys, looks up the data, resolves components and renders the following UI:\"]]\n    :root\n    [root :resolve {:root-id 1}]}])\n\n(defn ^:export render-fn [dom-node]\n  (uix.dom/render [example-root] dom-node))\n"]}