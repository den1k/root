{"version":3,"sources":["uix/dom/alpha.cljc"],"mappings":";;;;AAOA;;;AAAA,AAAMA,AAEHC,AAAQC;AAFX,AAIc,AAACC,AAAoBF,AACrB,AAAAG;AAAAC,AAAaH;AAAb,AAAA,AAAAE,AAAAC,AAACC;;AAGf,AAAA,AAAMC,AAAaL;AAAnB,AACW,AAACM,AAAyBN;;AAGrC,AAAA,AAAMO,AAAaR,AAAQS;AAA3B,AACW,AAASA,AAAK,AAACP,AAAoBF;;AAG9C;;;AAAA,AAAMU,AAEHV,AAAQC;AAFX,AAGW,AAAAU,AAAc,AAACT,AAAoBF;AAAnCY,AAA4CX;AAA5C,AAAA,AAAAU,AAAAC,AAACC;;AAGZ,AAAA,AAAMC,AAAaC;AAAnB,AACW,AAACC,AAAeD;;AAG3B,AAAA,AAAME,AAAmBF;AAAzB,AACW,AAACG,AAA8BH;;AAW1C;;;AAAA,AAAMI,AAEHlB;AAFH,AAGW,AAACmB,AAA4BnB;;AAGxC;;;AAAA,AAAMoB,AAEHC;AAFH,AAGW,AAACC,AAAiBD;;AAG7B;;;AAAA,AAAME,AAEHC,AAAMxB;AAFT,AAGW,AAAAyB,AAAmB,AAACxB,AAAoBuB;AAAxCE,AAA+C1B;AAA/C,AAAA,AAAAyB,AAAAC,AAACC;;AAKZ,AAAA,AAAMC,AAAkB7B;AAAxB,AAAA;AAGW,AAAiB8B,AAAkB,AAAC5B,AAAoBF;;AAEnE,AAAA,AAAM+B,AAAyB/B;AAA/B,AAAA;AAGW,AAAuB8B,AAAkB,AAAC5B,AAAoBF;;AAUtE,AAAA,AAAMgC,AAAkBhC;AAAxB,AACE,AAAqB8B,AAAkB,AAAC5B,AAAoBF;;AAU9D,AAAA,AAAMiC,AAAyBjC;AAA/B,AACE,AAA2B8B,AAAkB,AAAC5B,AAAoBF","names":["uix.dom.alpha/render","element","node","uix.compiler.alpha/as-element","G__102648","G__102649","js/module$node_modules$react_dom$index.render","uix.dom.alpha/create-root","js/module$node_modules$react_dom$index.unstable_createRoot","uix.dom.alpha/render-root","root","uix.dom.alpha/hydrate","G__102660","G__102661","js/module$node_modules$react_dom$index.hydrate","uix.dom.alpha/flush-sync!","cb","js/module$node_modules$react_dom$index.flushSync","uix.dom.alpha/flush-controlled!","js/module$node_modules$react_dom$index.unstable_flushControlled","uix.dom.alpha/unmount-at-node","js/module$node_modules$react_dom$index.unmountComponentAtNode","uix.dom.alpha/find-dom-node","component","js/module$node_modules$react_dom$index.findDOMNode","uix.dom.alpha/create-portal","child","G__102672","G__102673","js/module$node_modules$react_dom$index.createPortal","uix.dom.alpha/render-to-string","js/ReactDOMServer","uix.dom.alpha/render-to-static-markup","uix.dom.alpha/render-to-stream","uix.dom.alpha/render-to-static-stream"],"sourcesContent":["(ns uix.dom.alpha\n  \"Public API\"\n  (:require #?(:cljs [react-dom :as rdom])\n            [uix.compiler.alpha :as compiler]))\n\n;; react-dom top-level API\n\n(defn render\n  \"Renders element into DOM node. The first argument is Hiccup or React element.\"\n  [element node]\n  #?(:cljs\n          (-> (compiler/as-element element)\n              (rdom/render node))\n     :clj nil))\n\n(defn create-root [node]\n  #?(:cljs (rdom/unstable_createRoot node)\n     :clj nil))\n\n(defn render-root [element root]\n  #?(:cljs (.render root (compiler/as-element element))\n     :clj nil))\n\n(defn hydrate\n  \"Hydrates server rendered document at `node` with `element`.\"\n  [element node]\n  #?(:cljs (rdom/hydrate (compiler/as-element element) node)\n     :clj nil))\n\n(defn flush-sync! [cb]\n  #?(:cljs (rdom/flushSync cb)\n     :clj nil))\n\n(defn flush-controlled! [cb]\n  #?(:cljs (rdom/unstable_flushControlled cb)\n     :clj nil))\n\n#?(:clj\n   (defmacro flush-sync [& body]\n     `(flush-sync! (fn [] ~@body))))\n\n#?(:clj\n   (defmacro flush-controlled [& body]\n     `(flush-controlled! (fn [] ~@body))))\n\n(defn unmount-at-node\n  \"Unmounts React component rendered into DOM node\"\n  [node]\n  #?(:cljs (rdom/unmountComponentAtNode node)\n     :clj nil))\n\n(defn find-dom-node\n  \"Returns top-level DOM node associated with component\"\n  [component]\n  #?(:cljs (rdom/findDOMNode component)\n     :clj nil))\n\n(defn create-portal\n  \"Renders Hiccup element into DOM node\"\n  [child node]\n  #?(:cljs (rdom/createPortal (compiler/as-element child) node)\n     :clj (prn (str \"Portal elements are not supported on JVM, skipping: \" [:-> child node]))))\n\n;; react-dom/server top-level API\n\n(defn render-to-string [element]\n  \"Renders to HTML string to be used with React\"\n  #?(:clj (compiler/render-to-string element)\n     :cljs (.renderToString js/ReactDOMServer (compiler/as-element element))))\n\n(defn render-to-static-markup [element]\n  \"Renders to HTML string\"\n  #?(:clj (compiler/render-to-static-markup element)\n     :cljs (.renderToStaticMarkup js/ReactDOMServer (compiler/as-element element))))\n\n#?(:clj\n   (def render-to-stream\n     \"Like render-to-string, but pushes HTML in chunks as they are being rendered\n\n     (render-to-stream [element] {:on-chunk f})\"\n     compiler/render-to-stream))\n\n#?(:cljs\n   (defn render-to-stream [element]\n     (.renderToNodeStream js/ReactDOMServer (compiler/as-element element))))\n\n#?(:clj\n   (def render-to-static-stream\n     \"Like render-to-static-markup, but pushes HTML in chunks as they are being rendered\n\n     (render-to-static-stream [element] {:on-chunk f})\"\n     compiler/render-to-static-stream))\n\n#?(:cljs\n   (defn render-to-static-stream [element]\n     (.renderToStaticNodeStream js/ReactDOMServer (compiler/as-element element))))\n"]}