{"version":3,"sources":["root/impl/core.cljc"],"mappings":"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","names":["js/root","js/root.impl","js/root.impl.core","js/root.impl.core.id-gen","root.impl.core/id-gen","root.impl.util/make-id-gen","root.impl.core/add-id","x","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","root.impl.core/state","xframe.core.alpha/db","js/root.impl.core.history-log","root.impl.core/history-log","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__102626","vec__102627","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","root.impl.core/op-dispatch","op","_","js/root.impl.core.inverted-op","method-table__4672__auto__","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__102631","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","root.impl.core/inverted-op","p__102632","vec__102633","id-or-path","ent","p__102636","vec__102637","p__102640","vec__102641","p__102644","vec__102645","p__102651","vec__102652","map__102655","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","id","G__102658","G__102659","fexpr__102657","cljs.core/meta","tx","root.impl.core/inverted-txs","txs","methods","cljs.core/methods","ops","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","diff","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","js/console.warn","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","G__102662","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","root.impl.core/log-txs","vec__102663","vec__102666","G__102669","cljs.core/Keyword","map__102670","cljs.core/deref","log","temp__5739__auto__","inv-txs","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","root.impl.core/shift-history","root","from-key","to-key","map__102675","from","to","cljs.core/peek","cljs.core/pop","G__102677","G__102678","G__102679","root.impl.core/transact","root.impl.core/undo","root.impl.core/redo","js/root.impl.core.run-tx","fexpr__102684","root.impl.core/run-tx","_root","p__102686","vec__102687","root.impl.core/add","st","path","ref","ref+ent","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/vector?","p__102690","p__102691","map__102693","map__102694","->ref+x","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","p__102697","p__102698","map__102699","map__102700","ents","refs+xs","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","cljs.core/first","cljs.core.into.cljs$core$IFn$_invoke$arity$2","root.impl.core/vec-plop","seq","idx","item","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","root.impl.core/vec-pluck","seq102703","G__102704","cljs.core/next","self__4776__auto__","idxs","cljs.core/not","cljs.core/set","cljs.core/empty","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.keep.cljs$core$IFn$_invoke$arity$1","p__102707","vec__102708","i","p__102711","p__102712","map__102713","map__102714","vec__102717","p__102721","p__102722","map__102724","map__102725","->ref","ent-path","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","p1__102720#","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__102728","p__102729","map__102730","map__102731","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","p__102735","p__102736","map__102737","map__102738","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","p1__102741#","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$5","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/maybe-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__102771","cljs.core/coll?","G__102772","p__102773","p__102774","map__102775","map__102776","cljs.core/update-in","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","G__102780","js/Error","p__102781","map__102782","root.impl.core.transact.cljs$core$IFn$_invoke$arity$3","history?","conformed-txs","root.impl.util/conform!","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","seq__102784","cljs.core/seq","chunk__102786","count__102787","i__102788","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","ctx","cljs.core.update.cljs$core$IFn$_invoke$arity$6","cljs.core/dissoc","xframe.core.alpha/notify-listeners!","p__102790","vec__102791","seq__102792","first__102793","root.impl.core/remove-fragment","v1","views","all-views","root.impl.core/default-child-view","padded-view","G__102794","p__102795","vec__102796","k","child-or-children","cljs.core/name","G__102800","root.impl.core/domify-map","vfn","m","root.impl.core.domify_map.cljs$core$IFn$_invoke$arity$3","into-vec","p__102801","vec__102802","v","root.impl.core/child-views","child-views","cljs.core/select-keys","root.impl.core/default-view*","non-views","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__102809","vec__102810","too-long?","k'","pretty-v","root.impl.util/pretty-str","this__4439__auto__","k__4440__auto__","this__4441__auto__","k102816","else__4442__auto__","G__102821","add-view","remove-method","dispatch-view","method-table","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__102823","vec__102824","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__102815","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","this__4435__auto__","h__4297__auto__","fexpr__102835","coll__4436__auto__","cljs.core/hash-unordered-coll","this102817","other102818","this__4448__auto__","k__4449__auto__","cljs.core/-with-meta","this__4446__auto__","k__4447__auto__","pred__102837","cljs.core/keyword-identical?","expr__102838","G__102840","G__102841","G__102842","G__102843","G__102844","G__102845","G__102846","G__102847","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","unused__11304__auto__","self__","G__102856","args102820","cljs.core/aclone","map__102859","root.impl.core/UIRoot","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__102819","extmap__4478__auto__","G__102863","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","root.impl.core/->UIRoot","root.impl.core/map->UIRoot","this","a","b","transact","lookup","c","G__102861","cljs.core/with-meta","G__102862","root.impl.resolver/resolved-view","root.impl.core/view-multi-dispatch","opts","f","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","root.impl.multi/multi-dispatch","cljs.core.update.cljs$core$IFn$_invoke$arity$3","add-method","dispatch-val","view","clojure.set/rename-keys","cljs.core/ifn?","G__102864","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha/spec?","cljs.spec.alpha/map-spec-impl","G__102865","cljs.core/map?","G__102866","G__102867","G__102868","root.impl.core/opts-warn","root-opts","vec__102869","root-type","root.impl.core/__temp-default-ent->ref","G__102873","root.impl.core/->post-fixed-keyword","post-fix","root.impl.core.__GT_post_fixed_keyword.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","p__102874","map__102875","root.impl.core/child-view-mappings","content-keys","content-post-fix","content-ui-keys","root.impl.core.__GT_post_fixed_keyword.cljs$core$IFn$_invoke$arity$1","content-key->ui-key","cljs.core/zipmap","root.impl.core/default-opts","p__102877","map__102878","root.impl.core/ui-root","dispatch-fn","default-view","invoke-fn","lookup-sub","content-spec","root.impl.resolver/->resolver-spec"],"sourcesContent":["(ns root.impl.core\n  (:require [medley.core :as md]\n            [xframe.core.alpha :as xf]\n            [root.impl.multi :as multi]\n            [root.impl.resolver :as rr]\n            [root.impl.entity :as ent]\n            [root.impl.util :as u]\n            [clojure.set :as set]\n            [#?(:clj  clojure.spec.alpha\n                :cljs cljs.spec.alpha) :as s]))\n\n(defonce id-gen (u/make-id-gen 1000))\n(defn add-id [x] (assoc x :id (id-gen)))\n\n(def state xf/db)\n\n(defonce history-log (atom {:idx nil :log []}))\n\n(defn op-dispatch [[op _]] op)\n\n(declare transact vec-plop vec-pluck)\n\n(defmulti inverted-op op-dispatch)\n\n(defmethod inverted-op :add\n  [[_ id-or-path ent]]\n  [:remove id-or-path ent])\n\n(defmethod inverted-op :add-after\n  [[_ id-or-path ent]]\n  [:remove-after id-or-path ent])\n\n(defmethod inverted-op :remove-after\n  [[_ id-or-path ent]]\n  [:add-after id-or-path ent])\n\n(defmethod inverted-op :remove\n  [[_ id-or-path ent]]\n  [:add id-or-path ent])\n\n(defmethod inverted-op :set\n  [[_ {:as ent :keys [id]}]]\n  [:set ((-> ent meta :root) :lookup id)])\n\n(defmethod inverted-op :toggle [tx] tx)\n\n(defn- inverted-txs [txs]\n  (let [methods (methods inverted-op)\n        ops     (into #{} (map op-dispatch) txs)\n        txs     (if (= ops (set/intersection methods ops))\n                  txs\n                  (let [diff (set/difference ops methods)]\n                    #?(:cljs (js/console.warn \"Missing inverted-ops for:\" diff))\n                    (remove (fn [tx] (contains? diff (op-dispatch tx))) txs)))]\n    (some->> txs (mapv inverted-op) not-empty)))\n\n(defn log-txs [txs]\n  (let [[[op]] txs]\n    (case op\n      (:undo :redo) nil\n      (let [{:keys [log]} @history-log]\n        (when-let [inv-txs (inverted-txs txs)]\n          (swap! history-log assoc\n                 :log (conj log inv-txs)\n                 :redo-log []))))))\n\n(declare transact)\n\n(defn- shift-history [root from-key to-key]\n  (let [{from from-key to to-key} @history-log]\n    (when-let [txs (peek from)]\n      (swap! history-log assoc\n             from-key (pop from)\n             to-key (conj to (mapv inverted-op txs)))\n      (transact root txs {:history? false}))))\n\n(defn undo [root]\n  (shift-history root :log :redo-log))\n\n(defn redo [root]\n  (shift-history root :redo-log :log))\n\n(comment\n (undo)\n (redo)\n )\n\n(defmulti run-tx (fn [_root tx] (:op tx)))\n\n(defn- add [st path [ref ent :as ref+ent]]\n  (-> st\n      (update-in path\n                 (fn [x]\n                   (cond\n                     (vector? x) (conj x ref)\n                     :else ref)))\n      (conj ref+ent)))\n\n(defmethod run-tx :add\n  [{:as root :keys [->ref+x]} {:as tx :keys [path ent]}]\n  (let [ref+ent (->ref+x ent)]\n    (swap! state add path ref+ent)))\n\n(defmethod run-tx :add-many             ; todo remove-many\n  [{:as root :keys [->ref+x]} {:as tx :keys [path ents]}]\n  (let [refs+xs (mapv ->ref+x ents)]\n    (swap! state\n           (fn [st]\n             (-> st\n                 (update-in path\n                            (fn [x]\n                              (into (or x []) (map first) refs+xs)))\n                 (into refs+xs))))))\n\n(defn vec-plop [seq idx item]\n  (vec (concat (take idx seq) [item] (drop idx seq))))\n\n(defn vec-pluck [seq & idxs]\n  (if-not idxs\n    seq\n    (let [idxs (set idxs)]\n      (into (empty seq)\n            (comp\n             (map-indexed vector)\n             (keep (fn [[idx i]]\n                     (when (not (contains? idxs idx)) i))))\n            seq))))\n\n(defmethod run-tx :add-after\n  [{:as root :keys [->ref+x]} {:keys [path ent]}]\n  (let [[ref :as ref+ent] (->ref+x ent)]\n    (swap! state\n           (fn [st]\n             (-> st\n                 (update-in (pop path)\n                            (fn [x]\n                              (vec-plop x (-> path peek inc) ref)))\n                 (conj ref+ent))))))\n\n(defmethod run-tx :remove\n  [{:as root :keys [->ref]} {:keys [path ent]}]\n  (let [ref      (->ref ent)\n        ent-path (:path ent)]\n    (swap! state\n           (fn [st]\n             (-> st\n                 (update-in (if ent-path (pop ent-path) path)\n                            (fn [x]\n                              (cond\n                                (s/valid? ::ent/refs-coll x)\n                                (into [] (remove #(= % ref)) x)\n                                :else nil)))\n                 (dissoc ref))))))\n\n(defmethod run-tx :remove-after\n  [{:as root :keys [->ref]} {:keys [path ent]}]\n  (let [ref (->ref ent)]\n    (swap! state\n           (fn [st]\n             (-> st\n                 (update-in (pop path) vec-pluck (-> path peek inc))\n                 (dissoc ref))))))\n\n(defmethod run-tx :set\n  [{:as root :keys [->ref+x]} {:keys [path ent]}]\n  (let [ref+ent (->ref+x ent)]\n    (swap! state\n           (fn [st]\n             (-> st (conj ref+ent))))))\n\n(s/def ::op-path\n  (s/and #(or (keyword? %) (vector? %))\n         (s/conformer\n          (fn [x]\n            (if (keyword? x)\n              [x]\n              (and (vector? x) (not-empty x))))\n          vec)))\n\n(s/def ::tx\n  (s/cat :op keyword?\n         :path (s/? ::op-path)\n         :ent (s/? ::ent/entity)\n         :ents (s/? (s/coll-of ::ent/entity))))\n\n(s/def ::txs (s/coll-of ::tx))\n\n(defmethod run-tx :toggle\n  [{:as root :keys [->ref]} {:keys [path ent]}]\n  (let [ref (->ref ent)]\n    ;; path can be nil\n    (swap! state update-in (concat [ref] path) not)))\n\n(defmethod run-tx :undo [root _] (undo root))\n(defmethod run-tx :redo [root _] (redo root))\n\n(defn transact\n  ([root txs]\n   (transact root txs {:history? true}))\n  ([root txs {:keys [history?]}]\n   (let [conformed-txs (u/conform! ::txs (filter identity txs))]\n     (when history?\n       (log-txs txs))\n     (doseq [ctx conformed-txs\n             :let [ctx (update ctx :ent dissoc :actions :handlers :views)]]\n       (run-tx root ctx)))\n   (xf/notify-listeners!)))\n\n(defn- remove-fragment [[v1 & views :as all-views]]\n  (if (= :<> v1)\n    views\n    all-views))\n\n(defn default-child-view [views]\n  (let [padded-view [:div {:style {:padding      5\n                                   :padding-left 10\n                                   :margin-top   5}}]]\n    (case (::rr/type (meta views))\n      :entity (conj padded-view views)\n      :entities (into padded-view (remove-fragment views))\n      :entity-map (into padded-view\n                        (map\n                         (fn [[k child-or-children]]\n                           [:div (str (name k) \": \")\n                            [default-child-view child-or-children]]))\n                        views))))\n\n(defn- domify-map\n  ([vfn m] (domify-map [:<>] vfn m))\n  ([into-vec vfn m]\n   (into into-vec\n         (map (fn [[k v]]\n                [:div\n                 (str (name k) \": \") (vfn v)]))\n         m)))\n\n(defn child-views [ent]\n  (let [root (-> ent meta :root)]\n    (when-let [child-views (not-empty (select-keys ent (:content-ui-keys root)))]\n      [domify-map default-child-view child-views])))\n\n(defn default-view* [ent]\n  ;; fixme pass root proper\n  (let [root      (-> ent meta :root)\n        non-views (apply dissoc ent\n                         :actions :path :parent-id :handlers\n                         (concat (:content-keys root) (:content-ui-keys root)))]\n\n    [:div.mb2\n     {:style {:padding 10\n              :border  \"1px solid tomato\"}}\n     (into [:<>]\n           (map (fn [[k v]]\n                  (let [too-long? (> (count (str v)) 140)\n                        k'        (str k)\n                        pretty-v  [:div.overflow-scroll.code.f6.di\n                                   {:style {:max-height  200\n                                            :white-space :pre-wrap}}\n                                   (u/pretty-str v)]]\n                    (if too-long?\n                      [:details [:summary.outline-0 k'] pretty-v]\n                      [:div k' \" \" pretty-v])))\n                non-views))\n     [child-views ent]]))\n\n(defrecord UIRoot\n  [add-view remove-method dispatch-view method-table]\n  #?@(:clj\n      [clojure.lang.IFn\n       (invoke\n         [this a]\n         (this a nil))\n       (invoke\n         [this a b]\n         (this a b nil))\n       (invoke\n         [{:as root :keys [transact lookup]} a b c]\n         (case a\n           :transact (transact root b c)\n           :lookup (with-meta (lookup b) {:root root})\n           :view (add-view b c)\n           :resolve (cond-> [rr/resolved-view root]\n                      b (conj b))\n           (dispatch-view a)))]\n      :cljs\n      [IFn\n       (-invoke\n        [this a]\n        (this a nil))\n       (-invoke\n        [this a b]\n        (this a b nil))\n       (-invoke\n        [{:as root :keys [transact lookup]} a b c]\n        (case a\n          :transact (transact root b c)\n          :lookup (with-meta (lookup b) {:root root})\n          :view (add-view b c)\n          :resolve (cond-> [rr/resolved-view root]\n                     b (conj b))\n          (dispatch-view a)))]))\n\n(defn- view-multi-dispatch [opts]\n  (-> {:invoke-fn (fn as-component [f x] [f x])}\n      (merge opts)\n      multi/multi-dispatch\n      (update :add-method\n              (fn [add-method]\n                (fn with-name [dispatch-val view]\n                  #?(:cljs\n                     (set! (.-displayName view)\n                           (str \"root-view__\" (name dispatch-val))))\n                  (add-method dispatch-val view))))\n      (set/rename-keys {:add-method    :add-view\n                        :remove-method :remove-view\n                        :method-table  :view-table\n                        :dispatch      :dispatch-view})))\n\n;; Root config specs\n\n(s/def ::dispatch-fn ifn?)\n(s/def ::lookup ifn?)\n(s/def ::lookup-sub ifn?)\n(s/def ::content-keys (s/coll-of keyword?))\n(s/def ::content-spec (s/or :fn ifn? :spec s/spec?))\n(s/def ::->ref ifn?)\n(s/def ::transact ifn?)\n(s/def ::add-id ifn?)\n\n(s/def ::ui-root-data\n  (s/keys :req-un [::dispatch-fn ::content-spec ::content-keys]))\n\n(s/def ::ui-root-static\n  (s/and ::ui-root-data (s/keys :req-un [::lookup])))\n\n(s/def ::ui-root-reactive\n  (s/and ::ui-root-static (s/keys :req-un [::lookup-sub])))\n\n(s/def ::ui-root-dynamic\n  (s/and ::ui-root-reactive (s/keys :req-un [::transact ::add-id ::->ref])))\n\n(s/def ::ui-root\n  (s/or :dynamic ::ui-root-dynamic\n        :reactive ::ui-root-reactive\n        :static ::ui-root-static\n        :data ::ui-root-data))\n\n(defn opts-warn [root-opts]\n  (let [[root-type _] (u/conform! ::ui-root root-opts)]\n    #?(:cljs\n       (when (contains? #{:static :reactive} root-type)\n         (js/console.warn\n          \"Root Warning: static use only. Missing one or more required\"\n          \"functions: lookup-sub, transact, ent->ref, add-id.\")))))\n\n(defn __temp-default-ent->ref [ent]\n  (:id ent))\n\n(defn ->post-fixed-keyword\n  ([post-fix] (fn [x] (->post-fixed-keyword post-fix x)))\n  ([post-fix x]\n   (keyword (str (name x) post-fix))))\n\n(defn- child-view-mappings [{:keys [content-keys content-post-fix]\n                             :or   {content-post-fix \"-ui\"}}]\n  (let [content-ui-keys     (mapv (->post-fixed-keyword content-post-fix) content-keys)\n        content-key->ui-key (zipmap content-keys content-ui-keys)]\n    {:content-keys        content-keys\n     :content-ui-keys     content-ui-keys\n     :content-key->ui-key content-key->ui-key}))\n\n(def ^:private default-opts\n  {:content-post-fix        \"-ui\"\n   ;; in uix/reagent this is interpreted as a react fragment\n   :contents-hiccup-wrapper [:<>]})\n\n(defn ui-root\n  [{:as   opts\n    :keys [dispatch-fn default-view invoke-fn lookup lookup-sub ->ref content-spec]\n    :or   {default-view default-view*\n           ->ref        __temp-default-ent->ref}}]\n  (opts-warn opts)\n  (let [opts (merge\n              default-opts\n              {:resolve-spec (rr/->resolver-spec content-spec)}\n              opts)]\n    (map->UIRoot\n     (merge\n      (view-multi-dispatch\n       {:dispatch-fn         dispatch-fn\n        :default-dispatch-fn default-view\n        :invoke-fn           invoke-fn})\n      {:->ref   ->ref\n       :->ref+x (fn ->ref+x [x] [(->ref x) x])}\n      (child-view-mappings opts)\n      (when (nil? lookup-sub)\n        {:lookup-sub lookup})\n      opts))))\n"]}