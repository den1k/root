{"version":3,"sources":["uix/compiler/aot.cljs"],"mappings":";;;;AAKA,AAAKA,AAAIC;AACT,AAAKC,AAASC;AACd,AAAKC,AAASC;AAEd,AAAA,AAAMC,AAAgBC;AAAtB,AACE,AAAMC,AAAG,AAASC;AAAT,AACE,AAAMC,AAAI,AAACC,AAAMJ,AAAE,AAAQE;AAA3B,AACE,AAAI,AAACG,AAAQF;AACX,AAACG,AAAaH;;AACdA;;;AACTI,AAAQ,AAAA,AAAQ,AAAwBP,AAC9B,AAACQ,AAAWP,AAAGQ,AACfR;AAPhB,AAQE,AAAM,AAAcS,AAAW,AAAAC;AAA/B,AACE,AAAM,AAAQV,AAAID;;AADpB;;AAEA,AAAeU;AAAf,AACE,AAACE,AAAYZ,AAAEC,AAAGM;;AADpB;;AAEA,AAACM,AAAiBb,AAAEO;;AACpBA;;AAEJ,AAAA,AAAMO,AAAcC;AAApB,AACE,AAAAC,AAAoB,AAACE,AAAkBH;AAAvC,AAAA,AAAA,AAAAC,AAAA;AAEE,AAACjB,AAAegB;;AAFlB,AAAAC,AAAUC;AAAV,AACEA;;;AAGJ,AAAA,AAAME,AAAmBJ,AAAIK,AAAMC;AAAnC,AACE,AAAMC,AAAS,AAAAC,AAAaH;AAAb,AAAA,AAAAG;AAAAA;;AAAA;;;AACTC,AAAG,AAACV,AAAaC;AADvB,AAEE,AAAM,AAAQO,AAAUD;;AACxB,AAAC5B,AAAAA,AAAAA,AAAI+B,AAAAA,AAAGF,AAAAA","names":["uix.compiler.aot/>el","js/module$node_modules$react$index.createElement","uix.compiler.aot/suspense","js/module$node_modules$react$index.Suspense","uix.compiler.aot/fragment","js/module$node_modules$react$index.Fragment","uix.compiler.aot/fn-to-react-fn","f","rf","props","ret","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","uix.compiler.alpha/as-element","rf-memo","js/module$node_modules$react$index.memo","uix.compiler.alpha/*default-compare-args*","js/goog.DEBUG","js/__REACT_DEVTOOLS_GLOBAL_HOOK__","uix.compiler.alpha/with-name","uix.compiler.alpha/cache-react-fn","uix.compiler.aot/as-component","tag","temp__5741__auto__","cached-fn","uix.compiler.alpha/cached-react-fn","uix.compiler.aot/component-element","attrs","args","js-props","or__4185__auto__","el"],"sourcesContent":["(ns uix.compiler.aot\n  \"Runtime helpers for Hiccup compiled into React.js\"\n  (:require [react :as react]\n            [uix.compiler.alpha :as r]))\n\n(def >el react/createElement)\n(def suspense react/Suspense)\n(def fragment react/Fragment)\n\n(defn fn-to-react-fn [f]\n  (let [rf (fn -rf [props]\n             (let [ret (apply f (.-argv props))]\n               (if (vector? ret)\n                 (r/as-element ret)\n                 ret)))\n        rf-memo (if-not ^boolean (.-uix-no-memo f)\n                  (react/memo rf r/*default-compare-args*)\n                  rf)]\n    (when (and ^boolean goog.DEBUG (exists? js/__REACT_DEVTOOLS_GLOBAL_HOOK__))\n      (set! (.-uixf rf) f))\n    (when ^boolean goog.DEBUG\n      (r/with-name f rf rf-memo))\n    (r/cache-react-fn f rf-memo)\n    rf-memo))\n\n(defn as-component [tag]\n  (if-some [cached-fn (r/cached-react-fn tag)]\n    cached-fn\n    (fn-to-react-fn tag)))\n\n(defn component-element [tag attrs args]\n  (let [js-props (or ^boolean attrs #js {})\n        el (as-component tag)]\n    (set! (.-argv js-props) args)\n    (>el el js-props)))\n"]}