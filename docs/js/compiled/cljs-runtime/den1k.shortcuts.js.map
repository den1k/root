{"version":3,"sources":["den1k/shortcuts.cljs"],"mappings":"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","names":["den1k.shortcuts/meta-keys","den1k.shortcuts/event->key","e","clojure.string/lower-case","den1k.shortcuts/default-remap","den1k.shortcuts/parse-combos","combos+handlers","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__102805","vec__102806","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","combo","handler","cljs.core/set","clojure.string.split.cljs$core$IFn$_invoke$arity$2","var_args","G__102814","den1k.shortcuts/shortcuts","js/Error","den1k.shortcuts.shortcuts.cljs$core$IFn$_invoke$arity$2","re-map","current-combo","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shortcuts","lookup-key","k","or__4185__auto__","on-key-down","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core/disj","temp__5739__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","on-key-up","js/den1k","js/den1k.shortcuts","js/den1k.shortcuts.global-shortcuts-map","den1k.shortcuts/global-shortcuts-map","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","den1k.shortcuts/global-shortcuts","seq102822","self__4777__auto__","cljs.core/seq","args","map__102827","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/deref","cljs.core/not-empty","G__102829","js/document","map__102830","shm","G__102832","cljs.core/reset!"],"sourcesContent":["(ns den1k.shortcuts\n  (:require [clojure.string :as str]))\n\n(def meta-keys\n  #{\"control\" \"meta\" \"option\" \"cmd\" \"shift\"})\n\n(defn event->key [e] (-> e .-key str/lower-case))\n\n(def default-remap {\"control\" \"ctrl\"\n                    \"alt\"     \"option\"\n                    \"meta\"    \"cmd\"})\n\n(defn parse-combos [combos+handlers]\n  (into {}\n        (map (fn [[combo handler]] [(set (str/split combo \"+\")) handler]))\n        combos+handlers))\n\n(defn shortcuts\n  \"Component-local shortcut handler.\n  Takes a map of combos and handlers and returns a map of keyboard handlers ready to\n  be merged into a component. Handlers are passed the keyboard event.\n  Example:\n  [:input (shortcuts {\\\"enter\\\" handle-enter!})]\n  ;; OR\n  [:input\n    (merge (shortcuts {\\\"enter\\\" handle-enter!})\n           {:placeholder \\\"Type something!\\\"\n            :value       @input-value})]\n  As a convenience, handler can return `false` to prevent event and stop propagation.\"\n  ([combos+handlers] (shortcuts combos+handlers default-remap))\n  ([combos+handlers re-map]\n   (let [current-combo (atom #{})\n         shortcuts     (parse-combos combos+handlers)\n         lookup-key    (fn [e] (as-> (event->key e) k\n                                     (or (re-map k) k)))\n         on-key-down   (fn [e]\n                         (let [k     (lookup-key e)\n                               combo (swap! current-combo conj k)]\n                           (when-not (meta-keys k)\n                             ; meta keys block the keyup event, so we throw out\n                             ; non-meta keys immediately.\n                             ; This means there can only be at most one non-meta-key\n                             ; as part of the combo\n                             (swap! current-combo disj k))\n                           (when-let [handler (get shortcuts combo)]\n                             (when (false? (handler e))\n                               (.preventDefault e)\n                               (.stopPropagation e)))))\n         on-key-up     (fn [e]\n                         (let [k (lookup-key e)]\n                           (swap! current-combo disj k)))]\n     {:on-key-down on-key-down\n      :on-key-up   on-key-up})))\n\n(defonce ^:private global-shortcuts-map (atom {}))\n\n(defn global-shortcuts\n  \"Like `shortcuts` for js/document.\"\n  [& args]\n  (when-let [{:keys [on-key-down on-key-up]} (not-empty @global-shortcuts-map)]\n    (doto js/document\n      (.removeEventListener \"keydown\" on-key-down)\n      (.removeEventListener \"keyup\" on-key-up)))\n\n  (let [{:as shm :keys [on-key-down on-key-up]} (apply shortcuts args)]\n    (doto js/document\n      (.addEventListener \"keydown\" on-key-down)\n      (.addEventListener \"keyup\" on-key-up))\n\n    (reset! global-shortcuts-map shm)))\n\n(comment\n\n (shortcuts {\"enter\" #(js/console.log \"pressed enter, event: \" %)\n             \"cmd+z\" #(js/console.log \"undo, event: \" %)})\n\n ;; => {:on-key-down #object[Function]\n ;;     :on-key-up   #object[Function]}\n\n\n (global-shortcuts {\"cmd+z\"       #(do (js/console.log \"UNDO\")\n                                       false\n                                       )\n                    \"cmd+shift+z\" #(do (js/console.log \"REDO\")\n                                       false)})\n\n )\n"]}