{"version":3,"sources":["uix/compiler/alpha.cljs"],"mappings":"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","names":["p1__100782#","p2__100783#","uix.compiler.alpha/*default-compare-args*","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","uix.compiler.alpha/unwrap-ref","-ref","cljs.core/PROTOCOL_SENTINEL","uix.compiler.alpha/js-val?","x","goog/typeOf","uix.compiler.alpha/named?","cljs.core/Keyword","cljs.core/Symbol","uix.compiler.alpha/hiccup-tag?","uix.compiler.alpha/prop-name-cache","uix.compiler.alpha/custom-prop-name-cache","uix.compiler.alpha/tag-name-cache","uix.compiler.alpha/transform-fns","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","uix.compiler.alpha/add-transform-fn","f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","uix.compiler.alpha/cc-regexp","js/RegExp","uix.compiler.alpha/cc-fn","s","clojure.string/upper-case","uix.compiler.alpha/dash-to-camel","name-str","clojure.string/starts-with?","uix.compiler.alpha/cached-prop-name","k","temp__5741__auto__","k'","v","uix.compiler.alpha/cached-custom-prop-name","uix.compiler.alpha/convert-interop-prop-value","cljs.core/vector?","a","uix.compiler.alpha/convert-prop-value-shallow","uix.compiler.alpha/kv-conv","o","G__100787","G__100788","G__100789","goog.object/set","uix.compiler.alpha/convert-prop-value","uix.compiler.alpha/kv-conv-shallow","G__100790","G__100791","G__100792","uix.compiler.alpha/custom-kv-conv","G__100793","G__100794","G__100795","uix.compiler.alpha/try-get-key","e100796","cljs.core.get.cljs$core$IFn$_invoke$arity$2","e","uix.compiler.alpha/get-key","cljs.core/map?","rest__100797#","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","cljs.core/ifn?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","uix.compiler.alpha/convert-custom-prop-value","rest__100798#","uix.compiler.alpha/class-names-coll","class","classes","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","c","uix.compiler.alpha/class-names-map","b","var_args","G__100817","uix.compiler.alpha/class-names","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq100814","G__100815","cljs.core/first","cljs.core/next","G__100816","self__4776__auto__","cljs.core/array?","uix.compiler.alpha.class_names.cljs$core$IFn$_invoke$arity$1","rst","uix.compiler.alpha.class_names.cljs$core$IFn$_invoke$arity$2","uix.compiler.alpha/set-id-class","props","id-class","id","G__100818","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","uix.compiler.alpha/convert-props","shallow?","G__100820","uix.compiler.alpha/re-tag","uix.compiler.alpha/parse-tag","tag","matches","uix.lib/re-seq*","val","nval","clojure.string/includes?","uix.compiler.alpha/cached-parse","uix.compiler.alpha/key-from-vec","cljs.core/-meta","cljs.core._nth.cljs$core$IFn$_invoke$arity$3","uix.compiler.alpha/native-element","parsed","argv","first-el","component","props?","cljs.core/deref","p","js-props","or__4185__auto__","first-child","temp__5743__auto__","key","uix.compiler.alpha/make-element","uix.compiler.alpha/fragment-element","js/module$node_modules$react$index.Fragment","uix.compiler.alpha/suspense-element","vec__100822","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","fallback","G__100825","uix.compiler.alpha/as-element","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$react$index.Suspense","uix.compiler.alpha/portal-element","js/console","child","target","node","js/document","cljs.core/name","js/ReactDOM.createPortal","uix.compiler.alpha/interop-element","uix.compiler.alpha/cached-react-fn","uix.compiler.alpha/cache-react-fn","rf","uix.compiler.alpha/symbol-for","uix.compiler.alpha/lazy-sym","uix.compiler.alpha/memo-sym","uix.compiler.alpha/lazy?","t","uix.compiler.alpha/memo?","uix.compiler.alpha/react-type?","uix.compiler.alpha/default-format-display-name","parts","last-idx","name-part","cljs.core/demunge","uix.compiler.alpha/*format-display-name*","uix.compiler.alpha/format-display-name","cljs.core/fn?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","uix.compiler.alpha/effective-component-name","display-name","name","uix.compiler.alpha/with-name","rf-memo","temp__5739__auto__","component-name","uix.compiler.alpha/fn-to-react-fn","p1__100834#","G__100835","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$react$index.memo","js/goog.DEBUG","js/__REACT_DEVTOOLS_GLOBAL_HOOK__","uix.compiler.alpha/as-lazy-component","cached-fn","p1__100836#","G__100837","uix.compiler.alpha/as-component","p1__100838#","uix.compiler.alpha/as-react","G__100839","G__100840","cljs_bean.core.bean.cljs$core$IFn$_invoke$arity$1","uix.compiler.alpha/component-element","G__100842","G__100843","js/module$node_modules$react$index.createElement","uix.compiler.alpha/vec-to-elem","cljs.core/keyword-identical?","cljs.core/seq?","uix.compiler.alpha/expand-seq","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","ret","G__100849","G__100850","G__100851","G__100852"],"sourcesContent":["(ns uix.compiler.alpha\n  \"Hiccup and UIx components interpreter. Based on Reagent.\"\n  (:require [react :as react]\n            [goog.object :as gobj]\n            [uix.hooks.alpha :as hooks]\n            [clojure.string :as str]\n            [cljs-bean.core :as bean]\n            [uix.lib]))\n\n(def ^:dynamic *default-compare-args* #(= (.-argv %1) (.-argv %2)))\n\n(defn unwrap-ref [-ref]\n  (if (implements? hooks/IRef -ref)\n    (hooks/unwrap ^not-native -ref)\n    -ref))\n\n(defn js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(defn named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn hiccup-tag? [x]\n  (keyword? x))\n\n(declare make-element)\n(declare as-element)\n(declare expand-seq)\n(declare convert-prop-value)\n(declare convert-prop-value-shallow)\n\n(def prop-name-cache #js {:class \"className\"\n                          :for \"htmlFor\"\n                          :charset \"charSet\"})\n\n(def custom-prop-name-cache #js {})\n\n(def tag-name-cache #js {})\n\n(def transform-fns (atom #{}))\n\n(defn add-transform-fn [f]\n  (swap! transform-fns conj f))\n\n(def ^:private cc-regexp (js/RegExp. \"-(\\\\w)\" \"g\"))\n\n(defn- cc-fn [s]\n  (str/upper-case (aget s 1)))\n\n(defn ^string dash-to-camel [^string name-str]\n  (if (or (str/starts-with? name-str \"aria-\")\n          (str/starts-with? name-str \"data-\"))\n    name-str\n    (.replace name-str cc-regexp cc-fn)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (let [name-str (-name ^not-native k)]\n      (if-some [k' (aget prop-name-cache name-str)]\n        k'\n        (let [v (dash-to-camel name-str)]\n          (aset prop-name-cache name-str v)\n          v)))\n    k))\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (let [name-str (-name ^not-native k)]\n      (if-some [k' (aget custom-prop-name-cache name-str)]\n        k'\n        (let [v (dash-to-camel name-str)]\n          (aset custom-prop-name-cache name-str v)\n          v)))\n    k))\n\n(defn convert-interop-prop-value [k v]\n  (cond\n    (= k :style) (if (vector? v)\n                   (-reduce ^not-native v\n                            (fn [a v]\n                              (.push a (convert-prop-value-shallow v))\n                              a)\n                            #js [])\n\n                   (convert-prop-value-shallow v))\n    (keyword? v) (-name ^not-native v)\n    :else v))\n\n(defn kv-conv [o k v]\n  (gobj/set o (cached-prop-name k) (convert-prop-value v))\n  o)\n\n(defn kv-conv-shallow [o k v]\n  (gobj/set o (cached-prop-name k) (convert-interop-prop-value k v))\n  o)\n\n(defn custom-kv-conv [o k v]\n  (gobj/set o (cached-custom-prop-name k) (convert-prop-value v))\n  o)\n\n(defn try-get-key [x]\n  ;; try catch to avoid ClojureScript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn convert-prop-value [x]\n  (cond\n    (js-val? x) x\n    (keyword? x) (-name ^not-native x)\n    (map? x) (reduce-kv kv-conv #js {} x)\n    (coll? x) (clj->js x)\n    (ifn? x) #(apply x %&)\n    :else (clj->js x)))\n\n(defn convert-prop-value-shallow [x]\n  (if (map? x)\n    (reduce-kv kv-conv-shallow #js {} x)\n    x))\n\n(defn convert-custom-prop-value [x]\n  (cond\n    (js-val? x) x\n    (keyword? x) (-name ^not-native x)\n    (map? x) (reduce-kv custom-kv-conv #js {} x)\n    (coll? x) (clj->js x)\n    (ifn? x) #(apply x %&)\n    :else (clj->js x)))\n\n(defn class-names-coll [class]\n  (let [^js/Array classes (reduce (fn [^js/Array a c]\n                                    (when ^boolean c\n                                      (->> (if (keyword? c) (-name ^not-native c) c)\n                                           (.push a)))\n                                    a)\n                                  #js []\n                                  class)]\n    (when (pos? (.-length classes))\n      (.join classes \" \"))))\n\n(defn class-names-map [class]\n  (let [^js/Array classes (reduce-kv (fn [^js/Array a b ^boolean c]\n                                       (when c\n                                         (->> (if (keyword? b) (-name ^not-native b) b)\n                                              (.push a)))\n                                       a)\n                                     #js []\n                                     class)]\n    (when (pos? (.-length classes))\n      (.join classes \" \"))))\n\n(defn ^string class-names\n  ([])\n  ([class]\n   (cond\n     ;; {c1 true c2 false}\n     (map? class)\n     (class-names-map class)\n\n     ;; [c1 c2 c3]\n     (or (array? class) (coll? class))\n     (class-names-coll class)\n\n     ;; :c1\n     (keyword? class)\n     (-name ^not-native class)\n\n     :else class))\n  ([a b]\n   (if ^boolean a\n     (if ^boolean b\n       (str (class-names a) \" \" (class-names b))\n       (class-names a))\n     (class-names b)))\n  ([a b & rst]\n   (reduce class-names (class-names a b) rst)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (aget id-class 1)\n        classes ^js/Array (aget id-class 2)]\n    (cond-> props\n            ;; Only use ID from tag keyword if no :id in props already\n            (and (some? id) (nil? (get props :id)))\n            (assoc :id id)\n\n            ;; Merge classes\n            (and (some? classes) (pos? (.-length classes)))\n            (assoc :class (class-names classes (get props :class))))))\n\n(defn convert-props [props id-class ^boolean shallow?]\n  (let [class (get props :class)\n        props (-> props\n                  (cond-> class (assoc :class (class-names class)))\n                  (set-id-class id-class))]\n    (cond\n      ^boolean (aget id-class 3)\n      (convert-custom-prop-value props)\n\n      shallow?\n      (convert-prop-value-shallow props)\n\n      :else (convert-prop-value props))))\n\n(def re-tag #\"[#.]?[^#.]+\")\n\n(defn parse-tag [tag]\n  (loop [matches ^js/Array (uix.lib/re-seq* re-tag tag)\n         tag \"div\"\n         id nil\n         ^js/Array classes #js []]\n    (let [val (aget matches 0)\n          nval (.slice matches 1)]\n      (if ^boolean val\n        (cond\n          (identical? (aget val 0) \"#\")\n          (recur nval tag (.slice val 1) classes)\n\n          (identical? (aget val 0) \".\")\n          (recur nval tag id (.concat classes #js [(.slice val 1)]))\n\n          :else (recur nval val id classes))\n        #js [tag id classes (str/includes? tag \"-\")]))))\n\n(defn cached-parse [x]\n  (if-some [s (aget tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (aset tag-name-cache x v)\n      v)))\n\n(defn key-from-vec [v]\n  (if-some [k (get-key (-meta v))]\n    k\n    (get-key (-nth v 1 nil))))\n\n(defn native-element [parsed ^not-native argv first-el]\n  (let [component (aget parsed 0)\n        props (-nth argv first-el nil)\n        props? (or (nil? props) (map? props))\n        props (if props?\n                (reduce (fn [p f] (f p)) props @transform-fns)\n                props)\n        js-props (or ^boolean (convert-props (when props? props) parsed false)\n                     #js {})\n        first-child (+ first-el (if props? 1 0))]\n    (when-some [key (get-key (-meta argv))]\n      (gobj/set js-props \"key\" key))\n    (when-some [-ref (unwrap-ref (get props :ref))]\n      (gobj/set js-props \"ref\" -ref))\n    (make-element argv component js-props first-child)))\n\n(defn fragment-element [^not-native argv]\n  (let [props (-nth argv 1 nil)\n        props? (or (nil? props) (map? props))\n        js-props (or ^boolean (convert-prop-value (when props? props))\n                     #js {})\n        first-child (+ 1 (if props? 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (gobj/set js-props \"key\" key))\n    (make-element argv react/Fragment js-props first-child)))\n\n(defn suspense-element [^not-native argv]\n  (let [props (-nth argv 1 nil)\n        props? (or (nil? props) (map? props))\n        [fallback props] (if props?\n                           [(as-element (get props :fallback))\n                            (dissoc props :fallback)]\n                           [nil props])\n        js-props (or ^boolean (convert-prop-value (when props? props))\n                     #js {})\n        first-child (+ 1 (if props? 1 0))]\n    (when ^boolean fallback\n      (gobj/set js-props \"fallback\" fallback))\n    (when-some [key (key-from-vec argv)]\n      (gobj/set js-props \"key\" key))\n    (make-element argv react/Suspense js-props first-child)))\n\n(defn portal-element [^not-native argv]\n  (.warn js/console \"React portal Hiccup syntax :-> is deprecated, use uix.dom.alpha/create-portal instead\")\n  (let [child (-nth argv 1 nil)\n        target (-nth argv 2 nil)\n        node (if (or (string? target) (keyword? target))\n               (.querySelector js/document (name target))\n               target)]\n    (js/ReactDOM.createPortal (as-element child) node)))\n\n(defn interop-element [^not-native argv]\n  (let [tag (-nth argv 1 nil)\n        parsed #js [tag nil nil]\n        first-el 2\n        props (-nth argv first-el nil)\n        props? (or (nil? props) (map? props))\n        props (if props?\n                (reduce (fn [p f] (f p)) props @transform-fns)\n                props)\n        js-props (or ^boolean (convert-props (when props? props) parsed true)\n                     #js {})\n        first-child (+ first-el (if props? 1 0))]\n    (when-some [key (get-key (-meta argv))]\n      (gobj/set js-props \"key\" key))\n    (when-some [-ref (unwrap-ref (get props :ref))]\n      (gobj/set js-props \"ref\" -ref))\n    (make-element argv tag js-props first-child)))\n\n(defn cached-react-fn [f]\n  (if ^boolean (.-compiled? f)\n    (.-cljsReactCompiled f)\n    (.-cljsReact f)))\n\n(defn cache-react-fn [f rf]\n  (if ^boolean (.-compiled? f)\n    (set! (.-cljsReactCompiled f) rf)\n    (set! (.-cljsReact f) rf)))\n\n(defn symbol-for [s]\n  (js* \"Symbol.for(~{})\" s))\n\n(def lazy-sym (symbol-for \"react.lazy\"))\n(def memo-sym (symbol-for \"react.memo\"))\n\n(defn lazy? [t]\n  (identical? lazy-sym (aget t \"$$typeof\")))\n\n(defn memo? [t]\n  (identical? memo-sym (aget t \"$$typeof\")))\n\n(defn react-type? [t]\n  (or (lazy? t) (memo? t)))\n\n(defn default-format-display-name [^string s]\n  (let [^js/Array parts (.split s #\"\\$\")\n        last-idx (dec ^number (.-length parts))\n        ^string name-part (aget parts last-idx)]\n    (if (== 1 (.-length parts))\n      (demunge name-part)\n      (-> ^js/Array (.slice parts 0 last-idx)\n          ^string (.join \".\")\n          (str \"/\" name-part)\n          demunge))))\n\n\n(def ^:dynamic *format-display-name* default-format-display-name)\n\n(defn format-display-name [s]\n  (if (fn? *format-display-name*)\n    (*format-display-name* s)\n    (throw (ex-info \"unexpected uix.compiler.alpha/*format-display-name* is not bound to a function\"\n                    {:bound-value *format-display-name*\n                     :value-type (goog/typeOf *format-display-name*)}))))\n\n(defn effective-component-name [^js f]\n  (or (when-some [display-name (.-displayName f)]\n        (if (string? display-name)\n          display-name))\n      (when-some [name (.-name f)]\n        (if (string? name)\n          name))))\n\n(defn with-name [^js f ^js rf ^js rf-memo]\n  (when-let [component-name (effective-component-name f)]\n    (when-some [display-name (format-display-name component-name)]\n      (set! (.-displayName rf) display-name)\n      (when-not ^boolean (.-uix-no-memo f)\n        (set! (.-displayName rf-memo) (str \"memo(\" display-name \")\"))))))\n\n(defn fn-to-react-fn [^js f]\n  (if (react-type? f)\n    f\n    (let [rf #(let [argv ^not-native (.-argv %)]\n                (as-element (apply (-nth argv 0) (subvec argv 1))))\n          rf-memo (if-not ^boolean (.-uix-no-memo f)\n                    (react/memo rf *default-compare-args*)\n                    rf)]\n      (when (and ^boolean goog.DEBUG (exists? js/__REACT_DEVTOOLS_GLOBAL_HOOK__))\n        (set! (.-uixf rf) f))\n      (when ^boolean goog.DEBUG\n        (with-name f rf rf-memo))\n      (cache-react-fn f rf-memo)\n      rf-memo)))\n\n(defn as-lazy-component [f]\n  (if-some [cached-fn (cached-react-fn f)]\n    cached-fn\n    (let [rf #(as-element (apply f (subvec (.-argv %) 1)))\n          rf-memo (if-not ^boolean (.-uix-no-memo f)\n                    (react/memo rf *default-compare-args*)\n                    rf)]\n      (when (and ^boolean goog.DEBUG (exists? js/__REACT_DEVTOOLS_GLOBAL_HOOK__))\n        (set! (.-uixf rf) f))\n      (when ^boolean goog.DEBUG\n        (with-name f rf rf-memo))\n      (cache-react-fn f rf-memo)\n      rf-memo)))\n\n(defn as-component [tag]\n  (if-some [cached-fn (cached-react-fn tag)]\n    cached-fn\n    (fn-to-react-fn tag)))\n\n(defn as-react [f]\n  #(as-element (f (bean/bean %))))\n\n(defn component-element [tag v]\n  (let [js-props #js {}]\n    (set! (.-argv js-props) v)\n    (when-some [key (key-from-vec v)]\n      (gobj/set js-props \"key\" key))\n    (react/createElement (as-component tag) js-props)))\n\n(defn vec-to-elem [^not-native v]\n  (let [tag (-nth v 0 nil)]\n    (cond\n      (keyword-identical? :<> tag) (fragment-element v)\n      (keyword-identical? :# tag) (suspense-element v)\n      (keyword-identical? :-> tag) (portal-element v)\n      (keyword-identical? :> tag) (interop-element v)\n      (hiccup-tag? tag) (-> (cached-parse (-name ^not-native tag))\n                            (native-element v 1))\n      :else (component-element tag v))))\n\n(defn as-element [x]\n  (cond\n    (js-val? x) x\n    (vector? x) (vec-to-elem x)\n    (seq? x) (expand-seq x)\n    (keyword? x) (-name ^not-native x)\n    (satisfies? IPrintWithWriter x) (pr-str x)\n    :else x))\n\n(defn expand-seq [s]\n  (reduce (fn [ret e]\n            (.push ret (as-element e))\n            ret)\n          #js []\n          s))\n\n(defn make-element [^not-native argv component js-props first-child]\n  (case (- (-count argv) first-child)\n    0 (react/createElement component js-props)\n    1 (->> (as-element (-nth argv first-child nil))\n           (react/createElement component js-props))\n    (.apply react/createElement nil\n            (reduce-kv (fn [^js/Array a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js [component js-props]\n                       argv))))\n"]}