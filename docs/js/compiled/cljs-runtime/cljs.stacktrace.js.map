{"version":3,"sources":["cljs/stacktrace.cljc"],"mappings":"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","names":["js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__96569","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/parse-stacktrace","repl-env","st","err","opts","cljs.stacktrace/parse-int","s","js/parseInt","cljs.stacktrace/starts-with?","s0","s1","goog.string/startsWith","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__4185__auto__","cljs.stacktrace/parse-file-line-column","flc","cljs.core/not","cljs.core/re-find","vec__96583","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__96586","xs","clojure.string.split.cljs$core$IFn$_invoke$arity$2","pre","line","column","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__96591","p__96592","vec__96593","vec__96596","post","x","i","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core/count","file","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__96601","clojure.string/replace","G__96602","G__96603","p__96606","p__96607","map__96609","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__96610","cljs.stacktrace/parse-file","host","host-port","port","asset-path","urlpat","match","cljs.core/contains?","and__4174__auto__","temp__5737__auto__","asset-root","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/chrome-st-el->frame","st-el","vec__96623","vec__96626","function","cljs.core/first","cljs.core/last","clojure.string/blank?","clojure.string/split-lines","p1__96631#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","p1__96632#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","p1__96634#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__96638","vec__96641","clojure.string/trim","p1__96646#","p1__96647#","p1__96648#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","idx","cljs.stacktrace/firefox-st-el->frame","vec__96655","vec__96658","p1__96665#","p1__96666#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__96667#","p__96674","map__96675","output-dir","frame-str","vec__96692","vec__96695","file-side","line-fn-side","process-frame","p__96704","map__96705","vec__96714","vec__96717","file-and-line","file-part","line-part","p__96720","map__96721","vec__96732","vec__96735","p__96740","map__96741","clojure.string/starts-with?","vec__96768","vec__96771","parts","file&line","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/second","col-part","G__96776","parse-source-loc-info","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","source-map","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","columns","p1__96779#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","mapped","p1__96780#","p2__96781#","cljs.core/inc","cljs.core/identity","default","adjust","get-best-column","p__96804","map__96805","cljs.stacktrace/mapped-frame","vec__96807","no-source-file?","line'","column'","call","file'","var_args","G__96813","cljs.stacktrace/mapped-stacktrace","js/Error","stacktrace","cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3","cljs.core/PersistentHashMap","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","munged-fn-name","unmunged-call-name","cljs.core/munge","mapped-frames","p1__96810#","cljs.core/memoize","call-merge","p1__96811#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","call->function","G__96815","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__96816","cljs.core/*print-newline*","*print-fn*-orig-val__96817","cljs.core/*print-fn*","*print-newline*-temp-val__96818","*print-fn*-temp-val__96819","x__4721__auto__","seq__96820","cljs.core/seq","chunk__96821","count__96822","i__96823","map__96829","temp__5739__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__96831","cljs.core/next","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Rhino Stacktrace\n\n(defmethod parse-stacktrace :rhino\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [[file-side line-fn-side] (string/split frame-str #\":\")\n                   file                      (string/replace file-side #\"\\s+at\\s+\" \"\")\n                   [line function]           (string/split line-fn-side #\"\\s+\")]\n               {:file     (string/replace file\n                            (str output-dir\n                              #?(:clj File/separator :cljs \"/\"))\n                            \"\")\n                :function (when function\n                            (-> function\n                              (string/replace \"(\" \"\")\n                              (string/replace \")\" \"\")))\n                :line     (when (and line (not (string/blank? line)))\n                            (parse-int line))\n                :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"\\tat .cljs_rhino_repl/goog/../cljs/core.js:4215 (seq)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:4245 (first)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:5295 (ffirst)\n     \\tat <cljs repl>:1\n     \\tat <cljs repl>:1\"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n\n  (parse-stacktrace {}\n    \"org.mozilla.javascript.JavaScriptException: Error: 1 is not ISeqable (.cljs_rhino_repl/goog/../cljs/core.js#3998)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3998 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:4017 (cljs$core$first)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:5160 (cljs$core$ffirst)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16005\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16004\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10243\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10334\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3979 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28083 (cljs$core$pr_sequential_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28811\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28267 (cljs$core$pr_writer_impl)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28349 (cljs$core$pr_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28353 (cljs$core$pr_seq_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28416 (cljs$core$pr_sb_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28430 (cljs$core$pr_str_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28524\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28520 (cljs$core$pr_str)\n   at <cljs repl>:1\n   \"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Nashorn Stacktrace\n\n(defmethod parse-stacktrace :nashorn\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [frame-str               (string/replace frame-str #\"\\s+at\\s+\" \"\")\n                    [function file-and-line] (string/split frame-str #\"\\s+\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace (.substring file-part 1)\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n;; -----------------------------------------------------------------------------\n;; Graal.JS Stacktrace\n\n(defmethod parse-stacktrace :graaljs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (string/blank? frame-str)\n              (let [[function file-and-line] (string/split frame-str #\"\\(\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace file-part\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3998)\n    \\tat cljs$core$first (.cljs_nashorn_repl/goog/../cljs/core.js:4017)\n    \\tat cljs$core$ffirst (.cljs_nashorn_repl/goog/../cljs/core.js:5160)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16005)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16004)\n    \\tat sval (.cljs_nashorn_repl/goog/../cljs/core.js:10243)\n    \\tat cljs$core$ISeqable$_seq$arity$1-6 (.cljs_nashorn_repl/goog/../cljs/core.js:10334)\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3979)\n    \\tat cljs$core$pr_sequential_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28083)\n    \\tat cljs$core$IPrintWithWriter$_pr_writer$arity$3-5 (.cljs_nashorn_repl/goog/../cljs/core.js:28811)\n    \\tat cljs$core$pr_writer_impl (.cljs_nashorn_repl/goog/../cljs/core.js:28267)\n    \\tat cljs$core$pr_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28349)\n    \\tat cljs$core$pr_seq_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28353)\n    \\tat cljs$core$pr_sb_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28416)\n    \\tat cljs$core$pr_str_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28430)\n    \\tat cljs$core$IFn$_invoke$arity$variadic-71 (.cljs_nashorn_repl/goog/../cljs/core.js:28524)\n    \\tat cljs$core$pr_str (.cljs_nashorn_repl/goog/../cljs/core.js:28520)\n    \\tat <anonymous> (<eval>:1)\n    \\tat <program> (<eval>:1)\\n\"\n    {:ua-product :nashorn}\n    {:output-dir \".cljs_nashorn_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n"]}