{"version":3,"sources":["examples/spec_dispatch/views.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/with-gen","cljs.spec.alpha/and-spec-impl","p1__108621#","cljs.core/string?","clojure.string/includes?","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$1","cljs.core/not-empty","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__108622","cljs.core/coll?","cljs.core/integer?","cljs.spec.alpha/map-spec-impl","G__108623","cljs.core/map?","cljs.core/contains?","G__108627","cljs.spec.alpha/or-spec-impl","examples.spec-dispatch.views/data","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.spec.alpha.exercise.cljs$core$IFn$_invoke$arity$1","examples.spec-dispatch.views/root","p1__108637#","root.impl.core/ui-root","cljs.spec.alpha/conform","G__108638","G__108639","G__108640","p__108641","map__108642","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","first-name","last-name","email","friends-ui","address-ui","open?","G__108644","G__108645","G__108646","p__108647","map__108648","street","zip","country","state","addre-str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","src-url","js/encodeURI","examples.spec-dispatch.views/example-root","examples.util.dom/example","examples.util.dom/pretty-code-block","cljs.spec.alpha/form","examples.util.dom/code-block","examples.spec-dispatch.views/render-fn","dom-node","uix.dom.alpha/render"],"sourcesContent":["(ns examples.spec-dispatch.views\n  (:require [root.impl.core :as rc]\n            [clojure.spec.alpha :as s]\n            [clojure.test.check.generators]\n            [clojure.string :as str]\n            [examples.util.dom :as ud]\n            [uix.dom.alpha :as uix.dom]))\n\n(s/def ::email (s/with-gen (s/and string? #(str/includes? % \"@\"))\n                           #(s/gen #{\"foo@bar.com\" \"bar@baz.com\"})))\n(s/def ::first-name\n  (s/with-gen (s/and string? not-empty)\n              #(s/gen #{\"Kelly\" \"George\" \"Jerry\" \"Adam\" \"Suzie\" \"John\" \"Steve\"})))\n\n(s/def ::last-name string?)\n\n(s/def ::friends (s/coll-of ::user :gen-max 3))\n\n\n(s/def ::street string?)\n(s/def ::zip integer?)\n(s/def ::state string?)\n(s/def ::country string?)\n\n(s/def ::address (s/keys :req-un [::street ::zip ::state ::country]))\n\n(s/def ::user\n  (s/keys :req-un [::email ::first-name ::last-name]\n          :opt-un [::friends ::address]))\n\n(s/def ::views\n  (s/or :user ::user\n        :address ::address))\n\n(def data\n  {:first-name \"Eva\"\n   :last-name  \"Luator\"\n   :email      \"eva@luator.com\"\n   :friends    (map first (s/exercise ::user))\n   :address    {:street  \"100 8th Ave \"\n                :zip     10011\n                :state   \"NY\"\n                :country \"United States\"\n                :open?   true}\n   :open?      true})\n\n(def root\n  (rc/ui-root\n   {:dispatch-fn  #(first (s/conform ::views %))\n    :content-keys [:address :friends]\n    :content-spec ::views}))\n\n(root :view :user\n  (fn [{:keys [first-name last-name email friends-ui address-ui open?]}]\n    [:div.pa1.ma3.bg-black-05.br2\n     [:h1 first-name \" \" last-name]\n     [:a.link {:href (str \"mailto:\" email)} email]\n     address-ui\n     (when friends-ui\n       [:details\n        {:open open?}\n        [:summary \"Show friends\"]\n        friends-ui])]))\n\n(root :view :address\n  (fn [{:keys [street zip country state open?]}]\n    (let [addre-str (str/join \" \" [street state zip country])\n          src-url   (str \"https://maps.google.com/maps?q=\"\n                         (js/encodeURI addre-str)\n                         \"&t=&z=13&ie=UTF8&iwloc=&output=embed\")]\n      [:div\n       [:div.b \"Address: \" addre-str]\n       [:details\n        {:open open?}\n        [:summary.outline-0 \"Google Map\"]\n        [:iframe {:width         \"600\"\n                  :height        \"500\",\n                  :src           src-url\n                  :frame-border  \"0\"\n                  :scrolling     \"no\"\n                  :margin-height \"0\"\n                  :margin-width  \"0\"}]]])))\n\n\n(defn ^:export example-root []\n  [ud/example\n   {:title\n    \"Clojure Spec Based Data Generation and Dispatch\"\n    :source\n    \"https://github.com/den1k/root/blob/master/dev/examples/spec_dispatch/views.cljc\"\n    :details\n    [:<>\n     [:p\n      \"Specs for User and Address used for dispatch and data generation via\n      \" [:code.red \"(s/exercise ::user)\"] \".\"\n      [:br]\n      \"Note that \"\n      [:code.red \"::user\"]\n      \" is a recursive spec in that it can have \"\n      [:code.red \"::friends\"]\n      \" which are themselves users.\"]\n     [:div\n      [:h4.mb1 [:code.red \"::user\"] \" spec\"]\n      [ud/pretty-code-block (s/form ::user)]\n      [:h4.mb1 [:code.red \"::friends\"] \" spec\"]\n      [ud/pretty-code-block (s/form ::friends)]]\n     [:div\n      [:h4.mb1 [:code.red \"::address\"] \" spec\"]\n      [ud/pretty-code-block (s/form ::address)]]\n     [:p\n      \"There's also a \"\n      [:code.red \"::views\"]\n      \" spec that is used in the dispatch function\"]\n     [:div\n      [:h4.mb1 [:code.red \"::views\"] \" spec\"]\n      [ud/pretty-code-block (s/form ::views)]\n      [:h4.mb1 [:code.red \"root\"] \" config\"]\n      [ud/code-block\n       \"(def root\n (rc/ui-root\n   {:dispatch-fn  #(first (s/conform ::views %)) ; <- spec dispatch\n    :content-keys [:address :friends]\n    :content-spec ::views}))\"]]\n     ]\n    :root\n    [root :resolve {:data data}]}])\n\n(defn ^:export render-fn [dom-node]\n  (uix.dom/render [example-root] dom-node))\n"]}