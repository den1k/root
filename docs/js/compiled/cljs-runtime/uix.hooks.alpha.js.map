{"version":3,"sources":["uix/hooks/alpha.cljc"],"mappings":"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","names":["this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","uix.hooks.alpha/StateHook","uix.hooks.alpha/->StateHook","value","set-value","this","other","cljs.core/-equiv","o","goog/getUid","new-value","f","a","G__100429","p1__100426#","b","G__100430","p1__100427#","xs","G__100431","p1__100428#","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","writer","opts","cljs.core/pr-writer","uix.hooks.alpha/state","vec__100442","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","js/module$node_modules$react$index.useState","sh","G__100445","G__100446","js/module$node_modules$react$index.useMemo","G__100447","G__100448","x__4487__auto__","m__4488__auto__","uix.hooks.alpha/unwrap","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","uix.hooks.alpha/IRef","cljs.core/PROTOCOL_SENTINEL","uix.hooks.alpha/RefHook","uix.hooks.alpha/->RefHook","rref","goog.object/get","goog.object/set","G__100458","G__100459","G__100460","G__100461","G__100462","G__100463","uix.hooks.alpha/ref","vref","js/module$node_modules$react$index.useRef","G__100464","G__100465","var_args","G__100467","uix.hooks.alpha/effect!","js/Error","setup-fn","G__100468","js/module$node_modules$react$index.useEffect","ret","cljs.core/fn?","js/undefined","deps","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core/reset!","prev-deps*","G__100469","G__100470","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","G__100472","uix.hooks.alpha/layout-effect!","G__100483","js/module$node_modules$react$index.useLayoutEffect","G__100484","G__100485","G__100488","uix.hooks.alpha/callback","js/module$node_modules$react$index.useCallback","G__100489","G__100490","G__100492","uix.hooks.alpha/memo","G__100499","G__100500","uix.hooks.alpha/context","v","js/module$node_modules$react$index.useContext","uix.hooks.alpha/imperative-handle","ref","create-handle","G__100512","G__100513","G__100514","js/module$node_modules$react$index.useImperativeHandle","G__100521","uix.hooks.alpha/debug","uix.hooks.alpha.debug.cljs$core$IFn$_invoke$arity$2","fmt","js/module$node_modules$react$index.useDebugValue","uix.hooks.alpha/batched-update","js/ReactDOM","p__100527","map__100528","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uix.hooks.alpha/subscribe","get-current-value","subscribe","vec__100531","get-initial-state","G__100534","G__100535","state","set-state","ret-value","ret-val","G__100536","G__100537","G__100538","did-unsubscribe?","cljs.core/volatile!","check-for-updates","G__100539","G__100540","p1__100522#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Object","unsubscribe","cljs.core/vreset!"],"sourcesContent":["(ns uix.hooks.alpha\n  \"Wrappers for React.js Hooks\"\n  (:refer-clojure :exclude [ref])\n  #?(:cljs (:require-macros [uix.hooks.alpha :refer [maybe-js-deps with-deps-check]]))\n  #?(:cljs (:require [react :as r]\n                     [goog.object :as gobj])))\n\n;; == State hook ==\n#?(:cljs\n   (deftype StateHook [value set-value]\n     Object\n     (equiv [this other]\n       (-equiv this other))\n\n     IHash\n     (-hash [o] (goog/getUid o))\n\n     IDeref\n     (-deref [o]\n       value)\n\n     IReset\n     (-reset! [o new-value]\n       (set-value new-value))\n\n     ISwap\n     (-swap! [o f]\n       (set-value f))\n     (-swap! [o f a]\n       (set-value #(f % a)))\n     (-swap! [o f a b]\n       (set-value #(f % a b)))\n     (-swap! [o f a b xs]\n       (set-value #(apply f % a b xs)))\n\n     IPrintWithWriter\n     (-pr-writer [o writer opts]\n       (-write writer \"#object [uix.hooks.alpha.StateHook \")\n       (pr-writer {:val value} writer opts)\n       (-write writer \"]\"))))\n\n(defn state [value]\n  #?(:cljs (let [[value set-value] (r/useState value)\n                 sh (r/useMemo #(StateHook. value set-value) #js [])]\n             (r/useMemo (fn []\n                          (set! (.-value sh) value)\n                          (set! (.-set-value sh) set-value)\n                          sh)\n                        #js [value set-value]))\n     :clj (atom value)))\n\n(defprotocol IRef\n  (unwrap [this]))\n\n;; == Ref hook\n#?(:cljs\n   (deftype RefHook [rref]\n     IRef\n     (unwrap [this]\n       rref)\n\n     Object\n     (equiv [this other]\n       (-equiv this other))\n\n     IHash\n     (-hash [o] (goog/getUid o))\n\n     IDeref\n     (-deref [o]\n       (gobj/get rref \"current\"))\n\n     IReset\n     (-reset! [o new-value]\n       (gobj/set rref \"current\" new-value)\n       new-value)\n\n     ISwap\n     (-swap! [o f]\n       (-reset! o (f (-deref o))))\n     (-swap! [o f a]\n       (-reset! o (f (-deref o) a)))\n     (-swap! [o f a b]\n       (-reset! o (f (-deref o) a b)))\n     (-swap! [o f a b xs]\n       (-reset! o (apply f (-deref o) a b xs)))\n\n     IPrintWithWriter\n     (-pr-writer [o writer opts]\n       (-write writer \"#object [uix.hooks.alpha.RefHook \")\n       (pr-writer {:val (-deref o)} writer opts)\n       (-write writer \"]\"))))\n\n(defn ref [value]\n  #?(:cljs (let [vref (r/useRef value)]\n             (r/useMemo #(RefHook. vref) #js []))\n     :clj (atom value)))\n\n#?(:clj\n   (defmacro maybe-js-deps [deps]\n     `(if ~deps (into-array ~deps) js/undefined)))\n\n#?(:clj\n   (defmacro with-deps-check [[prev-deps] f deps]\n     `(let [~prev-deps (ref ~deps)]\n        (when (not= @~prev-deps ~deps)\n          (reset! ~prev-deps ~deps))\n        ~f)))\n\n;; == Effect hook ==\n(defn effect!\n  ([setup-fn]\n   #?(:cljs (r/useEffect\n              #(let [ret (setup-fn)]\n                 (if (fn? ret) ret js/undefined)))))\n  ([setup-fn deps]\n   #?(:cljs (with-deps-check [prev-deps*]\n              (r/useEffect\n               (fn []\n                 (reset! prev-deps* deps)\n                 (let [ret (setup-fn)]\n                   (if (fn? ret) ret js/undefined)))\n               (maybe-js-deps @prev-deps*))\n              deps))))\n\n#?(:clj\n   (defmacro with-effect\n     \"Takes optional vector of dependencies and body to be executed in an effect.\"\n     [deps & body]\n     (let [[deps setup-fn] (if (vector? deps)\n                             [deps body]\n                             [nil (cons deps body)])]\n       `(effect! #(do ~@setup-fn) ~deps))))\n\n;; == Layout effect hook ==\n(defn layout-effect!\n  ([setup-fn]\n   #?(:cljs (r/useLayoutEffect\n              #(let [ret (setup-fn)]\n                 (if (fn? ret) ret js/undefined)))))\n  ([setup-fn deps]\n   #?(:cljs (with-deps-check [prev-deps*]\n              (r/useLayoutEffect\n               (fn []\n                 (reset! prev-deps* deps)\n                 (let [ret (setup-fn)]\n                   (if (fn? ret) ret js/undefined)))\n               (maybe-js-deps @prev-deps*))\n              deps))))\n\n#?(:clj\n   (defmacro with-layout-effect\n     \"Takes optional vector of dependencies and body to be executed in a layout effect.\"\n     [deps & body]\n     (let [[deps setup-fn] (if (vector? deps)\n                             [deps body]\n                             [nil (cons deps body)])]\n       `(layout-effect! #(do ~@setup-fn) ~deps))))\n\n;; == Callback hook ==\n(defn callback\n  ([f]\n   #?(:cljs (r/useCallback f)\n      :clj f))\n  ([f deps]\n   #?(:cljs (with-deps-check [prev-deps*]\n              (r/useCallback f (maybe-js-deps @prev-deps*))\n              deps)\n      :clj f)))\n\n;; == Memo hook ==\n(defn memo\n  ([f]\n   #?(:cljs (r/useMemo f)\n      :clj (f)))\n  ([f deps]\n   #?(:cljs (with-deps-check [prev-deps*]\n              (r/useMemo f (maybe-js-deps @prev-deps*))\n              deps)\n      :clj (f))))\n\n;; == Context hook ==\n(defn context [v]\n  #?(:cljs (r/useContext v)\n     :clj v))\n\n;; == Imperative Handle hook ==\n(defn imperative-handle [ref create-handle deps]\n  #?(:cljs (with-deps-check [prev-deps*]\n             (r/useImperativeHandle ref create-handle (maybe-js-deps @prev-deps*))\n             deps)))\n\n;; == Debug hook ==\n(defn debug\n  ([v]\n   (debug v nil))\n  ([v fmt]\n   #?(:cljs (r/useDebugValue v fmt))))\n\n#?(:cljs\n    (def batched-update\n      (if (exists? js/ReactDOM)\n        (.-unstable_batchedUpdates js/ReactDOM)\n        (fn [f] (f)))))\n\n;; == Subscription ==\n;; https://github.com/facebook/react/tree/master/packages/use-subscription\n(defn subscribe [{:keys [get-current-value subscribe]}]\n  #?(:clj (get-current-value)\n     :cljs (let [get-initial-state (r/useCallback (fn [] #js {:get-current-value get-current-value\n                                                              :subscribe subscribe\n                                                              :value (get-current-value)})\n                                                  #js [get-current-value subscribe])\n                 [state set-state] (r/useState get-initial-state)\n                 ret-value (if (or (not (identical? (gobj/get state \"get-current-value\") get-current-value))\n                                   (not (identical? (gobj/get state \"subscribe\") subscribe)))\n                             (let [ret-val (get-current-value)]\n                               (set-state #js {:get-current-value get-current-value\n                                               :subscribe subscribe\n                                               :value ret-val})\n                               ret-val)\n                             (gobj/get state \"value\"))]\n             (r/useDebugValue ret-value)\n             (r/useEffect\n               (fn []\n                 (let [did-unsubscribe? (volatile! false)\n                       check-for-updates (fn []\n                                           (when-not ^boolean @did-unsubscribe?\n                                             (let [value (get-current-value)]\n                                               (batched-update\n                                                 (fn []\n                                                   (set-state\n                                                     #(if (or (not (identical? (gobj/get % \"get-current-value\") get-current-value))\n                                                              (not (identical? (gobj/get % \"subscribe\") subscribe))\n                                                              (= (gobj/get % \"value\") value))\n                                                        %\n                                                        (.assign js/Object #js {} % #js {:value value}))))))))\n                       unsubscribe (subscribe check-for-updates)]\n                   (check-for-updates)\n                   (fn []\n                     (vreset! did-unsubscribe? true)\n                     (unsubscribe))))\n               #js [get-current-value subscribe])\n             ret-value)))\n"]}