{"version":3,"sources":["examples/minimal/views.cljc"],"mappings":";;;;;AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAWL,AAAA,AAAMC,AAAQC;AAAd,AACE,AAACC,AAAIH,AAAKE;;AAEZ,AAAKE,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACeJ,AAGAK;AAElB,AAAAC,AAAA;AAAAC,AAAA;AAAAC,AACE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAAaI;AAAb,AAAA,AAAA,AAAA,AAAA,AACqBA;;AAFvB,AAAA,AAAAR,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACL,AAAAA,AAAAA;AAID,AAAA,AAAeY;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAgBGC,AAAqBlB,AAErBmB,AAODf;;;AAEL,AAAA,AAAegB,AAAWC;AAA1B,AACE,AAAA,AAACC,AAAgBN,AAAcK","names":["examples.minimal.views/data","examples.minimal.views/lookup","x","cljs.core.get.cljs$core$IFn$_invoke$arity$2","examples.minimal.views/root","root.impl.core/ui-root","cljs.core/integer?","G__102880","G__102881","G__102882","p__102883","map__102884","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","src","examples.minimal.views/example-root","examples.util.dom/example","examples.util.dom/pretty-code-block","examples.util.dom/code-block","examples.minimal.views/render-fn","dom-node","uix.dom.alpha/render"],"sourcesContent":["(ns examples.minimal.views\n  (:require [root.impl.core :as rc]\n            [examples.util.dom :as ud]\n            [uix.dom.alpha :as uix.dom]))\n\n(def data\n  {1 {:type       :user\n      :first-name \"Eva\"\n      :last-name  \"Luator\"\n      :content    {:profile-pic 3\n                   :address     2}}\n   2 {:type   :address\n      :street \"1 Long Infinite Loop\"}\n   3 {:type :profile-pic\n      :src  \"https://picsum.photos/id/1005/200\"}})\n\n(defn lookup [x]\n  (get data x))\n\n(def root\n  (rc/ui-root\n   {:lookup       lookup\n    :dispatch-fn  :type\n    :content-keys [:content]\n    :content-spec integer?}))\n\n(root :view :profile-pic\n  (fn [{:keys [src]}]\n    [:img.br-100 {:src src}]))\n\n(defn ^:export example-root []\n  [ud/example\n   {:title\n    \"Minimal Example (with Default View)\"\n    :source\n    \"https://github.com/den1k/root/blob/master/dev/examples/minimal/views.cljc\"\n    :open-details?\n    true\n    :details\n    [:<>\n     [:p\n      \"This root only defines one view for \" [:code.red \":profile-pic\"]\n      \". However the root's \" [:code.ph1.b--red.ba \"default-view\"] \" assures\n      that the data is traversed and rendered properly in the absence of\n      defined views.\"]\n     [:p \"For data lookups this example uses the following hash-map\n     as a graph:\"]\n     [ud/pretty-code-block data]\n     [:p \"The root config looks like this:\"]\n     [ud/code-block\n      \"{:lookup       lookup\n :dispatch-fn  :type\n :content-keys [:content]\n :content-spec integer?}\"]\n     [:p \"where \" [:code.red \"lookup\"] \" is simply \" [:code \"#(get data %)\"]]]\n    :root\n    [root :resolve {:root-id 1}]}])\n\n(defn ^:export render-fn [dom-node]\n  (uix.dom/render [example-root] dom-node))\n"]}